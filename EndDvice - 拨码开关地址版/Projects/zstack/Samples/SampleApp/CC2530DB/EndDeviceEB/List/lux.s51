///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        22/Nov/2016  12:35:05 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\icecreamco\Desktop\GAP\EndDvice -        /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          Source\lux.c                                      /
//    Command line       =  -f "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"    /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "C:\Users\icecreamco\Deskt /
//                          op\GAP\EndDvice - 拨码开关地址版\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530D /
//                          B\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0          /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x2222                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=500             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Users\icecreamco\Deskt /
//                          op\GAP\EndDvice - 拨码开关地址版\Projects\zstack\ /
//                          Samples\SampleApp\Source\lux.c" -D                /
//                          xNWK_AUTO_POLL -D POWER_SAVING -D AUTO_RESET -D   /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          xLCD_SUPPORTED=DEBUG -lC                          /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\EndDeviceEB\List\" -lA                   /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\EndDeviceEB\List\" --diag_suppress       /
//                          Pe001,Pa010 -o "C:\Users\icecreamco\Desktop\GAP\E /
//                          ndDvice - 拨码开关地址版\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\EndDeviceEB\Obj\" -e           /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\" -I "C:\Users\icecreamco\Desktop\GAP\En /
//                          dDvice - 拨码开关地址版\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\Source\" -I                  /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\ZMain\TI2530DB\" -I             /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\hal\include\"  /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\hal\target\CC2 /
//                          530EB\" -I "C:\Users\icecreamco\Desktop\GAP\EndDv /
//                          ice - 拨码开关地址版\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\..\..\..\..\..\Components\mac\incl /
//                          ude\" -I "C:\Users\icecreamco\Desktop\GAP\EndDvic /
//                          e - 拨码开关地址版\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\" -I "C:\Users\icecreamco\Desktop\GAP\EndDvi /
//                          ce - 拨码开关地址版\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\Components\mac\low_l /
//                          evel\srf04\" -I "C:\Users\icecreamco\Desktop\GAP\ /
//                          EndDvice - 拨码开关地址版\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac /
//                          \low_level\srf04\single_chip\" -I                 /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mt\" -I        /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\osal\include\" /
//                           -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -   /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\services\saddr /
//                          \" -I "C:\Users\icecreamco\Desktop\GAP\EndDvice   /
//                          - 拨码开关地址版\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\Components\services\sda /
//                          ta\" -I "C:\Users\icecreamco\Desktop\GAP\EndDvice /
//                           - 拨码开关地址版\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\stack\af\"  /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\nwk\"    /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\sapi\"   /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\sec\"    /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\sys\"    /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\zdo\"    /
//                          -I "C:\Users\icecreamco\Desktop\GAP\EndDvice -    /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\zmac\" -I      /
//                          "C:\Users\icecreamco\Desktop\GAP\EndDvice -       /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\zmac\f8w\"     /
//                          -Ohz --require_prototypes                         /
//    List file          =  C:\Users\icecreamco\Desktop\GAP\EndDvice -        /
//                          拨码开关地址版\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\EndDeviceEB\List\lux.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME lux

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_MOV_X
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Multiple_Read?relay
        FUNCTION ??Multiple_Read?relay,0203H
        PUBLIC ??RecvACK?relay
        FUNCTION ??RecvACK?relay,0203H
        PUBLIC ??RecvByte?relay
        FUNCTION ??RecvByte?relay,0203H
        PUBLIC ??SendACK?relay
        FUNCTION ??SendACK?relay,0203H
        PUBLIC ??SendByte?relay
        FUNCTION ??SendByte?relay,0203H
        PUBLIC ??Single_Write?relay
        FUNCTION ??Single_Write?relay,0203H
        PUBLIC ??Start?relay
        FUNCTION ??Start?relay,0203H
        PUBLIC ??Stop?relay
        FUNCTION ??Stop?relay,0203H
        PUBLIC ??delayms?relay
        FUNCTION ??delayms?relay,0203H
        PUBLIC ??lux?relay
        FUNCTION ??lux?relay,0203H
        PUBLIC BUF
        PUBLIC LUXerror
        PUBLIC Light
        PUBLIC Multiple_Read
        FUNCTION Multiple_Read,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBLIC RecvACK
        FUNCTION RecvACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC RecvByte
        FUNCTION RecvByte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SendACK
        FUNCTION SendACK,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SendByte
        FUNCTION SendByte,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_Write
        FUNCTION Single_Write,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Start
        FUNCTION Start,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Stop
        FUNCTION Stop,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_3f99999a
        PUBWEAK __Constant_4007e6cf
        PUBLIC delayms
        FUNCTION delayms,080203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC dis_data
        PUBLIC lux
        FUNCTION lux,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Multiple_Read       SYMBOL "Multiple_Read"
??Multiple_Read?relay SYMBOL "?relay", Multiple_Read
RecvACK             SYMBOL "RecvACK"
??RecvACK?relay     SYMBOL "?relay", RecvACK
RecvByte            SYMBOL "RecvByte"
??RecvByte?relay    SYMBOL "?relay", RecvByte
SendACK             SYMBOL "SendACK"
??SendACK?relay     SYMBOL "?relay", SendACK
SendByte            SYMBOL "SendByte"
??SendByte?relay    SYMBOL "?relay", SendByte
Single_Write        SYMBOL "Single_Write"
??Single_Write?relay SYMBOL "?relay", Single_Write
Start               SYMBOL "Start"
??Start?relay       SYMBOL "?relay", Start
Stop                SYMBOL "Stop"
??Stop?relay        SYMBOL "?relay", Stop
delayms             SYMBOL "delayms"
??delayms?relay     SYMBOL "?relay", delayms
lux                 SYMBOL "lux"
??lux?relay         SYMBOL "?relay", lux

// C:\Users\icecreamco\Desktop\GAP\EndDvice - 拨码开关地址版\Projects\zstack\Samples\SampleApp\Source\lux.c
//    1 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 #include "OnBoard.h"
//    3 
//    4 #define   uchar unsigned char
//    5 #define   uint unsigned int	
//    6 #define	  SCL P1_2      //IIC时钟引脚定义
//    7 #define   SDA P1_3      //IIC数据引脚定义
//    8 #define	  SlaveAddress   0X46 //定义器件在IIC总线中的从地址,根据ALT  ADDRESS地址引脚不同修改
//    9                               //ALT  ADDRESS引脚接地时地址为0x46，接电源时地址为0xB8
//   10 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   11 uchar    BUF[3];                         //接收数据缓存区      	
BUF:
        DS 3
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   12 uint     dis_data;                       //变量
dis_data:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   13 uint16 Light;
Light:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   14 uint8 LUXerror=0;
LUXerror:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   15 
//   16 void delayms(uchar i);
//   17 void Start(void);
//   18 void Stop(void);
//   19 void SendACK(uchar ack);
//   20 void RecvACK(void);
//   21 uchar RecvByte(void);
//   22 void SendByte(uchar dat);
//   23 uchar RecvByte(void);
//   24 //void conversion(uint temp_data);
//   25 void Single_Write(uchar REG_Address);
//   26 void Multiple_Read(void);
//   27 
//   28 void lux(void);
//   29 void conversion(uint temp_data);
//   30 
//   31 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   32 void delayms(uchar i)
delayms:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function delayms
        CODE
//   33 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??delayms_0
//   34   for(;i>0;i--)
//   35   {
//   36      asm("NOP");
??delayms_1:
        NOP
//   37      asm("NOP");
        NOP
//   38      asm("NOP");
        NOP
//   39   }
        DEC     R1
??delayms_0:
        MOV     A,R1
        JNZ     ??delayms_1
//   40 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   41 void Start(void)
Start:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Start
        CODE
//   42 {
        FUNCALL Start, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Start, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Start, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   43     SDA = 1;                    //拉高数据线
        SETB    0x90.3
//   44     SCL = 1;                    //拉高时钟线
        SETB    0x90.2
//   45     delayms(1);                 //延时
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
//   46     SDA = 0;                    //产生下降沿
        CLR     0x90.3
//   47     delayms(1);                 //延时
        ; Setup parameters for call to function delayms
        LCALL   ??Subroutine5_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//   48     SCL = 0;                    //拉低时钟线
//   49     delayms(1);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function delayms
        REQUIRE ?Subroutine0
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0
//   50 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x1
        LCALL   ??delayms?relay
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//   51 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   52 void Stop(void)
Stop:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Stop
        CODE
//   53 {
        FUNCALL Stop, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Stop, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   54     SDA = 0;                    //拉低数据线
        CLR     0x90.3
//   55     SCL = 1;                    //拉高时钟线
        SETB    0x90.2
//   56     delayms(1);                //延时
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
//   57     SDA = 1;                    //产生上升沿
        SETB    0x90.3
//   58     delayms(1);                 //延时
        ; Setup parameters for call to function delayms
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
//   59 }
//   60 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   61 void SendACK(uchar ack)
SendACK:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SendACK
        CODE
//   62 {
        FUNCALL SendACK, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendACK, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   63     SDA = ack;                  //写应答信号
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.3,C
//   64     SCL = 1;                    //拉高时钟线
        LCALL   ?Subroutine2 & 0xFFFF
//   65     delayms(1);                 //延时
//   66     SCL = 0;                    //拉低时钟线
//   67     delayms(1);                 //延时
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
//   68 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock4
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        SETB    0x90.2
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
        ; Setup parameters for call to function delayms
        ; Setup parameters for call to function delayms
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     R1,#0x1
        LCALL   ??delayms?relay
        CLR     0x90.2
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//   69 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 void RecvACK(void)
RecvACK:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function RecvACK
        CODE
//   71 {
        FUNCALL RecvACK, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvACK, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvACK, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvACK, delayms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   72     P1DIR|=0X08;
        ORL     0xfe,#0x8
//   73     delayms(1);
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
//   74     SDA=1;
        LCALL   ?Subroutine4 & 0xFFFF
//   75     P1DIR&=~0X08;
//   76     delayms(1);
//   77     SCL = 1;                    //拉高时钟线
??CrossCallReturnLabel_2:
        SETB    0x90.2
//   78     delayms(1);                 //延时
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
//   79     if(SDA)
        MOV     C,0x90.3
        JNC     ??RecvACK_0
//   80       LUXerror=1;
        MOV     DPTR,#LUXerror
        MOV     A,#0x1
        MOVX    @DPTR,A
//   81     SCL = 0;                    //拉低时钟线
??RecvACK_0:
        CLR     0x90.2
//   82     P1DIR|=0X08;
        ORL     0xfe,#0x8
//   83     delayms(1);
        ; Setup parameters for call to function delayms
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock13
        REQUIRE P1DIR
        REQUIRE _A_P1
//   84 }
//   85 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 void SendByte(uchar dat)
SendByte:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function SendByte
        CODE
//   87 {
        FUNCALL SendByte, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendByte, RecvACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   88     uchar i;
//   89     for (i=0; i<8; i++)         //8位计数器
        MOV     R6,#0x8
//   90     {
//   91 	if(dat & 0x80)
??SendByte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??SendByte_1
//   92           SDA = 1;
        SETB    0x90.3
        SJMP    ??SendByte_2
//   93 	else
//   94           SDA = 0;
??SendByte_1:
        CLR     0x90.3
//   95         dat <<= 1;              //移出数据的最高位
??SendByte_2:
        CLR     C
        RLC     A
        MOV     R7,A
//   96         SCL = 1;                //拉高时钟线       
        LCALL   ?Subroutine2 & 0xFFFF
//   97         delayms(1);             //延时
//   98         SCL = 0;                //拉低时钟线
//   99     }
??CrossCallReturnLabel_5:
        DEC     R6
        MOV     A,R6
        JNZ     ??SendByte_0
//  100     RecvACK();
        ; Setup parameters for call to function RecvACK
        LCALL   ??RecvACK?relay
//  101 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock14
        REQUIRE _A_P1
//  102 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  103 uchar RecvByte(void)
RecvByte:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function RecvByte
        CODE
//  104 {
        FUNCALL RecvByte, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvByte, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvByte, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  105     uchar i;
//  106     uchar dat = 0;
        MOV     R6,#0x0
//  107 
//  108     SDA = 1;                    //使能内部上拉,准备读取数据,
        LCALL   ?Subroutine4 & 0xFFFF
//  109     P1DIR &= ~0x08;
//  110     delayms(1);
//  111     for (i=0; i<8; i++)         //8位计数器
??CrossCallReturnLabel_3:
        MOV     R7,#0x8
//  112     {
//  113         dat <<= 1;
//  114         SCL = 1;                //拉高时钟线
??RecvByte_0:
        SETB    0x90.2
//  115         delayms(1);             //延时
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
//  116         dat |= SDA;             //读数据   
        MOV     C,0x90.3
        CLR     A
        RLC     A
        MOV     R0,A
        MOV     A,R6
        RLC     A
        ORL     A,R0
        MOV     R6,A
//  117         delayms(1);
        ; Setup parameters for call to function delayms
        LCALL   ??Subroutine5_0 & 0xFFFF
//  118         SCL = 0;                //拉低时钟线
//  119     }
??CrossCallReturnLabel_7:
        DEC     R7
        MOV     A,R7
        JNZ     ??RecvByte_0
//  120     P1DIR |= 0x08;
        ORL     0xfe,#0x8
//  121     return dat;
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock15
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        REQUIRE P1DIR
        ; // Fall through to label ?Subroutine1
//  122 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        SETB    0x90.3
        ANL     0xfe,#0xf7
        ; Setup parameters for call to function delayms
        ; Setup parameters for call to function delayms
        MOV     R1,#0x1
        LCALL   ??delayms?relay
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  123 
//  124 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 void Single_Write(uchar REG_Address)
Single_Write:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function Single_Write
        CODE
//  126 {
        FUNCALL Single_Write, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  127     Start();                  //起始信号
        ; Setup parameters for call to function Start
        LCALL   ??Start?relay
//  128     SendByte(SlaveAddress);   //发送设备地址+写信号
        ; Setup parameters for call to function SendByte
        MOV     R1,#0x46
        LCALL   ??SendByte?relay
//  129     SendByte(REG_Address);    //内部寄存器地址，
        ; Setup parameters for call to function SendByte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SendByte?relay
//  130     Stop();                   //发送停止信号
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
//  131 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock20
//  132 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  133 void Multiple_Read(void)
Multiple_Read:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function Multiple_Read
        CODE
//  134 {   uchar i;	
        FUNCALL Multiple_Read, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_Read, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_Read, RecvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_Read, SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_Read, SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Multiple_Read, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  135     Start();                          //起始信号
        ; Setup parameters for call to function Start
        LCALL   ??Start?relay
//  136     SendByte(SlaveAddress+1);         //发送设备地址+读信号
        ; Setup parameters for call to function SendByte
        MOV     R1,#0x47
        LCALL   ??SendByte?relay
//  137     for (i=0; i<2; i++)                      //连续读取2个地址数据，存储中BUF
        MOV     R6,#0x0
//  138     {
//  139         BUF[i] = RecvByte();          //BUF[0]存储0x32地址中的数据
??Multiple_Read_0:
        ; Setup parameters for call to function RecvByte
        LCALL   ??RecvByte?relay
        MOV     ?V0 + 0,R6
        MOV     A,#BUF & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(BUF >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R1
        MOVX    @DPTR,A
//  140         if (i == 1)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??Multiple_Read_1
//  141         {
//  142            SendACK(1);                //最后一个数据需要回NOACK
        ; Setup parameters for call to function SendACK
        MOV     R1,#0x1
        SJMP    ??Multiple_Read_2
//  143         }
//  144         else
//  145         {		
//  146            SendACK(0);                //回应ACK
??Multiple_Read_1:
        ; Setup parameters for call to function SendACK
        MOV     R1,#0x0
??Multiple_Read_2:
        LCALL   ??SendACK?relay
//  147        }
//  148    }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x2
        JC      ??Multiple_Read_0
//  149     Stop();                          //停止信号
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
//  150 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
//  151 
//  152 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 void lux(void)
lux:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function lux
        CODE
//  154 {  
        FUNCALL lux, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL lux, Single_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL lux, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL lux, Single_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL lux, Single_Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL lux, delayms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL lux, Multiple_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  155    double temp=0;
//  156    Light=0;
//  157 
//  158     P1DIR |= 0x0c;
        ORL     0xfe,#0xc
//  159     P1SEL &= ~0x0c;
        ANL     0xf4,#0xf3
//  160     P1INP &= ~0x0c;
        ANL     0xf6,#0xf3
//  161    
//  162    delayms(1);
        ; Setup parameters for call to function delayms
        LCALL   ?Subroutine3 & 0xFFFF
//  163    
//  164    Single_Write(0x01);
//  165    delayms(1);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function delayms
        LCALL   ?Subroutine3 & 0xFFFF
//  166      
//  167     Single_Write(0x01);   // power on
//  168     Single_Write(0x10);   // H- resolution mode
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function Single_Write
        MOV     R1,#0x10
        LCALL   ??Single_Write?relay
//  169     delayms(10);              //延时180ms
        ; Setup parameters for call to function delayms
        MOV     R1,#0xa
        LCALL   ??delayms?relay
//  170     Multiple_Read();       //连续读出数据，存储在BUF中
        ; Setup parameters for call to function Multiple_Read
        LCALL   ??Multiple_Read?relay
//  171     dis_data=BUF[0];
//  172 
//  173     dis_data=(dis_data<<8)+BUF[1];//合成数据，即光照数据   
        MOV     DPTR,#BUF
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#dis_data
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  174     temp=(((double)dis_data)/1.2)*2.12346245;
//  175     Light=(uint16)temp;   
        MOV     DPTR,#dis_data
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_3f99999a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_4007e6cf
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     DPTR,#Light
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  176 }
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock22
        REQUIRE P1DIR
        REQUIRE P1SEL
        REQUIRE P1INP

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     R1,#0x1
        LCALL   ??delayms?relay
        ; Setup parameters for call to function Single_Write
        ; Setup parameters for call to function Single_Write
        MOV     R1,#0x1
        LCALL   ??Single_Write?relay
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3f99999a:
        DD 3F99999AH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4007e6cf:
        DD 4007E6CFH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??delayms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    delayms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RecvACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RecvACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RecvByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RecvByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Multiple_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Multiple_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??lux?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    lux

        END
//  177     
//  178     
//  179 
// 
// 435 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//   4 bytes in segment SFR_AN
//   8 bytes in segment XDATA_ROM_C
//   8 bytes in segment XDATA_Z
// 
// 495 bytes of CODE  memory
//   0 bytes of CONST memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 4 bytes shared)
//   8 bytes of XDATA memory
//
//Errors: none
//Warnings: none
