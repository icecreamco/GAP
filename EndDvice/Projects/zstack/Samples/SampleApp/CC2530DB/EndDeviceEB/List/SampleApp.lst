###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Aug/2015  22:06:33 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\Source\SampleApp.c   #
#    Command line       =  -f C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ           #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\To #
#                          ols\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO            #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x0101                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=500               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\boyangel\Desktop\Õ #
#                          ýÊ½°æ-4.0\EndDvice\Projects\zstack\Samples\SampleA #
#                          pp\Source\SampleApp.c -D xNWK_AUTO_POLL -D         #
#                          POWER_SAVING -D endA06 -D AUTO_RESET -D xMT_TASK   #
#                          -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                 #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB #
#                          \List\ -lA C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\En #
#                          dDvice\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\ --diag_suppress Pe001,Pa010 -o   #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB #
#                          \Obj\ -e --no_code_motion --debug --core=plain     #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\boyangel\Desktop\ #
#                          ÕýÊ½°æ-4.0\EndDvice\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\ -I C:\Users\boyangel\Desktop\ÕýÊ½°æ- #
#                          4.0\EndDvice\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\Source\ -I C:\Users\boyangel\Desktop\ÕýÊ½ #
#                          °æ-4.0\EndDvice\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\include\ -I                     #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\target\CC2530EB\ -I             #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\include\ -I                     #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\high_level\ -I                  #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\ -I             #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\single_chip\    #
#                          -I C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\Components\mt\ -I                           #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\ -I                    #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\ -I                  #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\ -I                  #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\af\ -I                        #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sapi\ -I                      #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sys\ -I                       #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\zdo\ -I                       #
#                          C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\ -I C:\Users\boyangel\Desktop\ #
#                          ÕýÊ½°æ-4.0\EndDvice\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\zmac\f8w\   #
#                          -Ohz --require_prototypes                          #
#    List file          =  C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB #
#                          \List\SampleApp.lst                                #
#    Object file        =  C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB #
#                          \Obj\SampleApp.r51                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\boyangel\Desktop\ÕýÊ½°æ-4.0\EndDvice\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "OSAL_Clock.h"
     61          #include "OSAL_PwrMgr.h"
     62          #include "OSAL_Timers.h"
     63          #include "ZGlobals.h"
     64          #include "AF.h"
     65          #include "aps_groups.h"
     66          #include "ZDApp.h"
     67          
     68          #include "SampleApp.h"
     69          #include "SampleAppHw.h"
     70          
     71          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf6
   \   unsigned char volatile __sfr P1INP
   \                     P1INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     72          #include "ioCC2530.h"
     73          /* HAL */
     74          #include "hal_lcd.h"
     75          #include "hal_led.h"
     76          #include "hal_key.h"
     77          
     78          #include "MT_UART.h"
     79          #include "hal_uart.h"
     80          #include "SHT20.h"
     81          #include "lux.h"
     82          #include "string.h"
     83          #include "math.h"
     84          #include "Mac_low_level.h"
     85          /*********************************************************************
     86           * MACROS
     87           */
     88          
     89          /*********************************************************************
     90           * CONSTANTS
     91           */
     92          
     93          /*********************************************************************
     94           * TYPEDEFS
     95           */
     96          
     97          /*********************************************************************
     98           * GLOBAL VARIABLES
     99           */
    100          
    101          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    102          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    103          {
    104            SAMPLEAPP_PERIODIC_CLUSTERID,
    105            SAMPLEAPP_FLASH_CLUSTERID
    106          };
    107          

   \                                 In  segment XDATA_ROM_C, align 1
    108          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    109          {
    110            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    111            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    112            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    113            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    114            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    115            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    116            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    117            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    118            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    119          };
    120          
    121          // This is the Endpoint/Interface description.  It is defined here, but
    122          // filled-in in SampleApp_Init().  Another way to go would be to fill
    123          // in the structure here and make it a "const" (in code space).  The
    124          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139                                    // This variable will be received when
    140                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t SampleApp_P2P_DstAddr;
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          
    154          #define	POWER P1_0           //¸ºÔØµçÔ´¿ØÖÆÎ»

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          uint8 pf;                    //Ê±ÖÓÊÂ¼þ±êÖ¾
   \                     pf:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          uint8 powf;                  //½øÈëË¯Ãß±êÖ¾
   \                     powf:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          #define ABLen 10             //Ã¿¸ö×ÖÄ¸°üº¬µÄ½Úµã¸öÊý

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint32 SleepTime_MS = 0;     //Ã¿´ÎË¯ÃßµÄÊ±¼ä
   \                     SleepTime_MS:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint32 SleepTime = 0;        //×ÜË¯ÃßÊ±¼ä      
   \                     SleepTime:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 TX_Flag = 0;           //·¢ËÍÊý¾Ý±êÖ¾Î»
   \                     TX_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          uint8 TCount = 0;            //×î´óË¯ÃßÊ±¼äµÄ´ÎÊý
   \                     TCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          uint8 CountF = 0;            //¼ÆËãË¯ÃßÊ±¼ä±êÖ¾Î»
   \                     CountF:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          uint8 Mode = 'C';            //½Úµã¹¤×÷Ä£Ê½  C£ºÕý³£  M£ºµ÷ÊÔ  
   \                     Mode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for Mode>`
   \   000001                REQUIRE __INIT_XDATA_I
    164          /*********************************************************************
    165           * LOCAL FUNCTIONS
    166           */
    167          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    168          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    169          void SampleApp_SendPeriodicMessage(uint8 ADR);
    170          void SampleApp_SendFlashMessage( uint16 flashTime );
    171          void SampleApp_Send_P2P_Message(uint8 select);
    172          
    173          /*********************************************************************
    174           * NETWORK LAYER CALLBACKS
    175           */
    176          
    177          /*********************************************************************
    178           * PUBLIC FUNCTIONS
    179           */
    180          
    181          /*********************************************************************
    182           * @fn      SampleApp_Init
    183           *
    184           * @brief   Initialization function for the Generic App Task.
    185           *          This is called during initialization and should contain
    186           *          any application specific initialization (ie. hardware
    187           *          initialization/setup, table initialization, power up
    188           *          notificaiton ... ).
    189           *
    190           * @param   task_id - the ID assigned by OSAL.  This ID should be
    191           *                    used to send messages and set timers.
    192           *
    193           * @return  none
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    196          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    197            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    198            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    199            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    200            
    201          //*****************ÉèÖÃ·¢ËÍ¹¦ÂÊ***********************************************//  
    202            macRadioSetTxPower( 0XF5 ); 
   \   000015                ; Setup parameters for call to function macRadioSetTxPower
   \   000015   79F5         MOV     R1,#-0xb
   \   000017   12....       LCALL   ??macRadioSetTxPower?relay
    203            
    204            
    205          //*****************²ÎÊý³õÊ¼»¯*************************************************//
    206            TX_Flag = 0;             //·¢ËÍÊý¾Ý±êÖ¾Î»ÇåÁã£¬¼´²»·¢ËÍ
   \   00001A   90....       MOV     DPTR,#TX_Flag
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
    207            TCount = 0;              //×î´óË¯ÃßÊ±¼äµÄ´ÎÊýÇåÁã
   \   00001F   90....       MOV     DPTR,#TCount
   \   000022   F0           MOVX    @DPTR,A
    208            CountF = 0;              //¼ÆËãË¯ÃßÊ±¼ä±êÖ¾Î»ÇåÁã
   \   000023   90....       MOV     DPTR,#CountF
   \   000026   F0           MOVX    @DPTR,A
    209            pf = 0;                  //Ê±ÖÓÊ±¼þ±êÖ¾ÇåÁã
   \   000027   90....       MOV     DPTR,#pf
   \   00002A   F0           MOVX    @DPTR,A
    210            powf = 0;                //½øÈëË¯Ãß±êÖ¾Î»ÇåÁã  ²»½øÈëË¯Ãß
   \   00002B   90....       MOV     DPTR,#powf
   \   00002E   F0           MOVX    @DPTR,A
    211            SleepTime_MS = 0;        //Ã¿´ÎË¯ÃßµÄÊ±¼äÇåÁã
   \   00002F   90....       MOV     DPTR,#__Constant_0
   \   000032   12....       LCALL   ?XLOAD_R2345
   \   000035   90....       MOV     DPTR,#SleepTime_MS
   \   000038   12....       LCALL   ?XSTORE_R2345
    212            SleepTime = 0;           //×ÜË¯ÃßÊ±¼äÇåÁã           
   \   00003B   90....       MOV     DPTR,#__Constant_0
   \   00003E   12....       LCALL   ?XLOAD_R2345
   \   000041   90....       MOV     DPTR,#SleepTime
   \   000044   12....       LCALL   ?XSTORE_R2345
    213          
    214          //*****************Òý½Å³õÊ¼»¯*************************************************//  
    215            P1SEL = 0X00;
   \   000047   75F400       MOV     0xf4,#0x0
    216            P0SEL = 0X00;
   \   00004A   75F300       MOV     0xf3,#0x0
    217            P1DIR |= 0X03;           //P1_0 P1_1ÉèÖÃÎªÊä³ö
   \   00004D   43FE03       ORL     0xfe,#0x3
    218            Delay_ms( 50 );          //ÑÓÊ±50MS
   \   000050                ; Setup parameters for call to function Delay_ms
   \   000050   7A32         MOV     R2,#0x32
   \   000052   7B00         MOV     R3,#0x0
   \   000054   12....       LCALL   ??Delay_ms?relay
    219            SWLED = 1;               //LED´ò¿ª
   \   000057   D291         SETB    0x90.1
    220            POWER = 0;               //´«¸ÐÆ÷¹Ø±Õ
   \   000059   12....       LCALL   ?Subroutine14 & 0xFFFF
    221            P1DIR &= ~0X01;          //P1_0ÉèÖÃÎªÊäÈë
    222            P1INP |= 0X01;          //P1_0ÉèÖÃÎª¸ß×èÌ¬
    223          
    224            P0DIR &= ~0X30;          //ÉèÖÃP0_4 P0_5ÎªÊäÈë
    225            P1DIR &= ~0X0C;          //ÉèÖÃP1_3 P1_2ÎªÊäÈë
    226            P0INP |= 0X30;           //ÉèÖÃP0_4 P0_5Îª¸ß×èÌ¬
    227            P1INP |= 0X0C;           //ÉèÖÃP1_3 P1_2Îª¸ß×èÌ¬
    228                
    229            // Device hardware initialization can be added here or in main() (Zmain.c).
    230            // If the hardware is application specific - add it here.
    231            // If the hardware is other parts of the device add it in main().
    232          
    233           #if defined ( BUILD_ALL_DEVICES )
    234            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    235            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    236            // together - if they are - we will start up a coordinator. Otherwise,
    237            // the device will start as a router.
    238            if ( readCoordinatorJumper() )
    239              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    240            else
    241              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    242          #endif // BUILD_ALL_DEVICES
    243          
    244          #if defined ( HOLD_AUTO_START )
    245            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    246            //  from starting the device and wait for the application to
    247            //  start the device.
    248            ZDOInitDevice(0);
    249          #endif
    250          
    251            // Setup for the periodic message's destination address
    252            // Broadcast to everyone
    253            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \                     ??CrossCallReturnLabel_21:
   \   00005C   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00005F   740F         MOV     A,#0xf
   \   000061   F0           MOVX    @DPTR,A
    254            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000062   A3           INC     DPTR
   \   000063   7414         MOV     A,#0x14
   \   000065   F0           MOVX    @DPTR,A
    255            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000066   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000069   74FF         MOV     A,#-0x1
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   F0           MOVX    @DPTR,A
    256          
    257            // Setup for the flash command's destination address - Group 1
    258            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00006E   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
    259            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000074   A3           INC     DPTR
   \   000075   7414         MOV     A,#0x14
   \   000077   F0           MOVX    @DPTR,A
    260            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000078   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
    261          
    262            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000081   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000084   7402         MOV     A,#0x2
   \   000086   F0           MOVX    @DPTR,A
    263            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000087   A3           INC     DPTR
   \   000088   7414         MOV     A,#0x14
   \   00008A   F0           MOVX    @DPTR,A
    264            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;
   \   00008B   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00008E   E4           CLR     A
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   F0           MOVX    @DPTR,A
    265            
    266            // Fill out the endpoint description.
    267            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000092   90....       MOV     DPTR,#SampleApp_epDesc
   \   000095   7414         MOV     A,#0x14
   \   000097   F0           MOVX    @DPTR,A
    268            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000098   A3           INC     DPTR
   \   000099   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00009F   F0           MOVX    @DPTR,A
    269            SampleApp_epDesc.simpleDesc
    270                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000A0   A3           INC     DPTR
   \   0000A1   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000A7   F0           MOVX    @DPTR,A
    271            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000A8   A3           INC     DPTR
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
    272          
    273            // Register the endpoint description with the AF
    274            afRegister( &SampleApp_epDesc );
   \   0000AB                ; Setup parameters for call to function afRegister
   \   0000AB   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000AD   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000AF   12....       LCALL   ??afRegister?relay
    275          
    276            // Register for all key events - This app will handle all key events
    277            RegisterForKeys( SampleApp_TaskID );
   \   0000B2                ; Setup parameters for call to function RegisterForKeys
   \   0000B2   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   ??RegisterForKeys?relay
    278          
    279            // By default, all devices start out in Group 1
    280            SampleApp_Group.ID = 0x0001;
   \   0000BA   90....       MOV     DPTR,#SampleApp_Group
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E4           CLR     A
   \   0000C2   F0           MOVX    @DPTR,A
    281            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   0000C3                ; Setup parameters for call to function osal_memcpy
   \   0000C3   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000C6   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000C9   F5..         MOV     ?V0 + 2,A
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D0   7C07         MOV     R4,#0x7
   \   0000D2   7D00         MOV     R5,#0x0
   \   0000D4   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000D6   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000D8   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
    282            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000DE                ; Setup parameters for call to function aps_AddGroup
   \   0000DE   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000E0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000E2   7914         MOV     R1,#0x14
   \   0000E4   12....       LCALL   ??aps_AddGroup?relay
    283          
    284          #if defined ( LCD_SUPPORTED )
    285            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    286          #endif
    287          }
   \   0000E7   7F03         MOV     R7,#0x3
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000EC                REQUIRE P1SEL
   \   0000EC                REQUIRE P0SEL
   \   0000EC                REQUIRE P1DIR
   \   0000EC                REQUIRE _A_P1
   \   0000EC                REQUIRE P1INP
   \   0000EC                REQUIRE P0DIR
   \   0000EC                REQUIRE P0INP

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   C290         CLR     0x90.0
   \   000002   53FEFE       ANL     0xfe,#0xfe
   \   000005   43F601       ORL     0xf6,#0x1
   \   000008   53FDCF       ANL     0xfd,#0xcf
   \   00000B   53FEF3       ANL     0xfe,#0xf3
   \   00000E   438F30       ORL     0x8f,#0x30
   \   000011   43F60C       ORL     0xf6,#0xc
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    288          
    289          /*********************************************************************
    290           * @fn      SampleApp_ProcessEvent
    291           *
    292           * @brief   Generic Application Task event processor.  This function
    293           *          is called to process all events for the task.  Events
    294           *          include timers, messages and any other user defined events.
    295           *
    296           * @param   task_id  - The OSAL assigned task ID.
    297           * @param   events - events to process.  This is a bit map and can
    298           *                   contain more than one event.
    299           *
    300           * @return  none
    301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    303          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    304            afIncomingMSGPacket_t *MSGpkt;
    305            (void)task_id;  // Intentionally unreferenced parameter
    306          
    307            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6077         JZ      ??SampleApp_ProcessEvent_0
    308            {
    309              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8029         SJMP    ??SampleApp_ProcessEvent_1
    310              while ( MSGpkt )
    311              {
    312                switch ( MSGpkt->hdr.event )
    313                {
    314                  // Received when a key is pressed
    315                  case KEY_CHANGE:
    316                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    317                    break;
    318          
    319                  // Received when a messages is received (OTA) for this endpoint
    320          //*******************½ÓÊÕÊý¾ÝµÄÊý¾Ý´¦Àí²¿·Ö***********************************//
    321                  case AF_INCOMING_MSG_CMD:
    322                    SampleApp_MessageMSGCB( MSGpkt );
    323                   break;
    324          
    325          //*******************½Úµã×´Ì¬¸Ä±äµÄ´¦Àí²¿·Ö***********************************//
    326                  // Received whenever the device changes state in the network
    327                  case ZDO_STATE_CHANGE:
    328                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    329                    if (   (SampleApp_NwkState == DEV_ROUTER)
    330                        || (SampleApp_NwkState == DEV_END_DEVICE) 
    331                          )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7013         JNZ     ??CrossCallReturnLabel_31
    332                    {
    333          //*******************¶¨Ê±Æ÷¿ªÆô***********************************************//
    334                  // Start sending the periodic message in a regular interval.
    335                      pf = 0;                             //¶¨Ê±Æ÷ÊÂ¼þ±êÖ¾Î»ÇåÁã
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E   90....       MOV     DPTR,#pf
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
    336                      SWLED = 0;                          //LED¹Ø±Õ
   \   000023   C291         CLR     0x90.1
    337                      CountF = 1;                         //¼ÆËãË¯ÃßÊ±¼ä±êÖ¾Î»¿ªÆô
   \   000025   90....       MOV     DPTR,#CountF
   \   000028   04           INC     A
   \   000029   F0           MOVX    @DPTR,A
    338                      osal_start_timerEx( SampleApp_TaskID,
    339                                          SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    340                                          500 );          //¶¨Ê±500MS
   \   00002A                ; Setup parameters for call to function osal_start_timerEx
   \   00002A   7CF4         MOV     R4,#-0xc
   \   00002C   FD           MOV     R5,A
   \   00002D   FA           MOV     R2,A
   \   00002E   12....       LCALL   ??Subroutine17_0 & 0xFFFF
    341                    }
    342                    else
    343                    {
    344                      // Device is no longer in the network
    345                    }
    346                    break;
    347          
    348                  default:
    349                    break;
    350                }
    351          
    352                // Release the memory
    353                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_31:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    354          
    355                // Next - if one is available
    356                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   6032         JZ      ??SampleApp_ProcessEvent_4
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   24E6         ADD     A,#-0x1a
   \   000053   601E         JZ      ??SampleApp_ProcessEvent_5
   \   000055   245A         ADD     A,#0x5a
   \   000057   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000059   24EF         ADD     A,#-0x11
   \   00005B   60B2         JZ      ??SampleApp_ProcessEvent_2
   \   00005D   80D2         SJMP    ??CrossCallReturnLabel_31
   \                     ??SampleApp_ProcessEvent_6:
   \   00005F                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000071   80BE         SJMP    ??CrossCallReturnLabel_31
   \                     ??SampleApp_ProcessEvent_5:
   \   000073                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007A   80B5         SJMP    ??CrossCallReturnLabel_31
    357              }
    358          
    359              // return unprocessed events
    360              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000081   FB           MOV     R3,A
   \   000082   807B         SJMP    ??SampleApp_ProcessEvent_8
    361            }
    362          
    363            // Send a message out - This event is generated by a timer
    364            //  (setup in SampleApp_Init()).
    365          //*********************¶¨Ê±ÊÂ¼þ´¦Àí²¿·Ö***************************************//
    366            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000084   EE           MOV     A,R6
   \   000085   A2E0         MOV     C,0xE0 /* A   */.0
   \   000087   5072         JNC     ??SampleApp_ProcessEvent_9
    367            { 
    368              if( pf == 0 )                            //pfÎª0  ·¢ËÍÊ±¼äÍ¬²½ÇëÇó
   \   000089   90....       MOV     DPTR,#pf
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   703C         JNZ     ??SampleApp_ProcessEvent_10
    369              {
    370                SWLED = 1;                             //LED¿ªÆô
   \   00008F   D291         SETB    0x90.1
    371                SampleApp_Send_P2P_Message( 0x02 );    //·¢ËÍÊ±¼äÍ¬²½ÇëÇó
   \   000091                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000091   7902         MOV     R1,#0x2
   \   000093   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    372                osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    373                                    1100);             //1.1sºó½øÈëÍ¬²½  roll_rateÎª1s
   \   000096                ; Setup parameters for call to function osal_start_timerEx
   \   000096   7C4C         MOV     R4,#0x4c
   \   000098   7D04         MOV     R5,#0x4
   \   00009A   12....       LCALL   ?Subroutine11 & 0xFFFF
    374              }
    375              else if( pf == 1 )                       //pfÎª1 Í¬²½³É¹¦ ·¢ËÍÊý¾Ý²¢½øÈëµÍ¹¦ºÄÄ£Ê½     
    376              {
    377                SWLED = 0;                             //LED¹Ø±Õ
    378                
    379          //**************Á¬ÉÏÍøÖ±½Ó·¢Ò»´ÎÊý¾Ý******************************************//
    380                P0INP &= ~0X30;                        //È¡ÏûP0_5 P0_4µÄ¸ß×èÌ¬Ä£Ê½
    381                P1INP &= ~0X0C;                        //È¡ÏûP1_3 P1_2µÄ¸ß×èÌ¬Ä£Ê½
    382                P1DIR |= 0X01;                         //ÉèÖÃP1_0ÎªÊä³ö
    383                Delay_ms( 1 );
    384                POWER = 1;                             //´ò¿ª¸ºÔØµçÔ´
    385                Delay_ms( 1000 );                      //µÈ´ý¸ºÔØµçÑ¹ÎÈ¶¨
    386                SampleApp_Send_P2P_Message( 0x01 );    //·¢ËÍ²É¼¯Êý¾Ý  µÚÒ»×é
    387                SampleApp_Send_P2P_Message( 0x01 );    //·¢ËÍ²É¼¯Êý¾Ý  µÚ¶þ×é
    388                POWER = 0;                             //¹Øµô¸ºÔØµçÔ´
    389                P1DIR &= ~0X01;                        //ÉèÖÃP1_0ÎªÊäÈë
    390                P1INP |= 0X01;                        //ÉèÖÃP1_0Îª¸ß×èÌ¬
    391                 
    392                P0DIR &= ~0X30;                        //ÉèÖÃP0_4 P0_5ÎªÊäÈë
    393                P1DIR &= ~0X0C;                        //ÉèÖÃP1_3 P1_2ÎªÊäÈë
    394                P0INP |= 0X30;                         //ÉèÖÃP0_4 P0_5Îª¸ß×èÌ¬
    395                P1INP |= 0X0C;                         //ÉèÖÃP1_3 P1_2Îª¸ß×èÌ¬          
    396          
    397          //***************ÉèÖÃrate   ½øÈëµÍ¹¦ºÄ****************************************//
    398                NLME_SetPollRate( 0 );
    399                NLME_SetQueuedPollRate( 0 );
    400                NLME_SetResponseRate( 0 );       
    401                
    402                powf = 1;                               //´ò¿ªË¯Ãß±êÖ¾                                      
    403                pf = 2;                                 //pfÖÃ2
    404              }
    405              if( pf == 2 )                             //pfÎª2 ½øÈëÕý³£µÄ·¢ËÍ-Ë¯Ãß¹¤×÷Ä£Ê½
   \                     ??CrossCallReturnLabel_29:
   \   00009D   90....       MOV     DPTR,#pf
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   6402         XRL     A,#0x2
   \   0000A3   701F         JNZ     ??CrossCallReturnLabel_30
    406              {
    407                if( TX_Flag == 1 )                      //Èç¹û·¢ËÍ±êÖ¾Î»Îª1 Ôò·¢ËÍ²É¼¯Êý¾Ý
   \                     ??SampleApp_ProcessEvent_11:
   \   0000A5   90....       MOV     DPTR,#TX_Flag
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6401         XRL     A,#0x1
   \   0000AB   7009         JNZ     ??CrossCallReturnLabel_0
    408                {
    409                  TX_Flag = 0;                          //·¢ËÍ±êÖ¾Î»ÇåÁã
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
    410          //*****************·¢ËÍ²É¼¯Êý¾Ý***********************************************//        
    411                  P0INP &= ~0X30;           
   \   0000AF   12....       LCALL   ?Subroutine8 & 0xFFFF
    412                  P1INP &= ~0X0C;
    413                  P1DIR |= 0X01;
    414                  Delay_ms( 1 );
    415                  POWER = 1;             
    416                  Delay_ms( 1000 );     
    417                  SampleApp_Send_P2P_Message( 0x01 );
    418                  SampleApp_Send_P2P_Message( 0x01 );
    419                  POWER = 0;
    420                  P1DIR &= ~0X01;
    421                  P1INP |= 0X01;
    422                   
    423                  P0DIR &= ~0X30;                    
    424                  P1DIR &= ~0X0C;
    425                  P0INP |= 0X30;
    426                  P1INP |= 0X0C;
    427                }
   \                     ??CrossCallReturnLabel_12:
   \   0000B2   FB           MOV     R3,A
   \   0000B3   12....       LCALL   ?Subroutine2 & 0xFFFF
    428                osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    429                   (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \                     ??CrossCallReturnLabel_0:
   \   0000B6                ; Setup parameters for call to function osal_rand
   \   0000B6   12....       LCALL   ??osal_rand?relay
   \   0000B9                ; Setup parameters for call to function osal_start_timerEx
   \   0000B9   EA           MOV     A,R2
   \   0000BA   2488         ADD     A,#-0x78
   \   0000BC   FC           MOV     R4,A
   \   0000BD   E4           CLR     A
   \   0000BE   3413         ADDC    A,#0x13
   \   0000C0   FD           MOV     R5,A
   \   0000C1   12....       LCALL   ?Subroutine11 & 0xFFFF
    430              }
    431              // return unprocessed events
    432              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_30:
   \   0000C4   EE           MOV     A,R6
   \   0000C5   6401         XRL     A,#0x1
   \   0000C7   FA           MOV     R2,A
   \   0000C8   EF           MOV     A,R7
   \   0000C9   80B6         SJMP    ??SampleApp_ProcessEvent_7
   \                     ??SampleApp_ProcessEvent_10:
   \   0000CB   6401         XRL     A,#0x1
   \   0000CD   70CE         JNZ     ??CrossCallReturnLabel_29
   \   0000CF   C291         CLR     0x90.1
   \   0000D1   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000D4   7B00         MOV     R3,#0x0
   \   0000D6   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D9                ; Setup parameters for call to function NLME_SetPollRate
   \   0000D9   7A00         MOV     R2,#0x0
   \   0000DB   7B00         MOV     R3,#0x0
   \   0000DD   12....       LCALL   ??NLME_SetPollRate?relay
   \   0000E0                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000E0   7A00         MOV     R2,#0x0
   \   0000E2   7B00         MOV     R3,#0x0
   \   0000E4   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   \   0000E7                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000E7   7A00         MOV     R2,#0x0
   \   0000E9   7B00         MOV     R3,#0x0
   \   0000EB   12....       LCALL   ??NLME_SetResponseRate?relay
   \   0000EE   90....       MOV     DPTR,#powf
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   90....       MOV     DPTR,#pf
   \   0000F7   04           INC     A
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   80AA         SJMP    ??SampleApp_ProcessEvent_11
    433            }
    434            // Discard unknown events
    435            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000FB   7A00         MOV     R2,#0x0
   \   0000FD   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   0000FF   7F04         MOV     R7,#0x4
   \   000101   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000104                REQUIRE _A_P1
   \   000104                REQUIRE P0INP
   \   000104                REQUIRE P1INP
   \   000104                REQUIRE P1DIR
   \   000104                REQUIRE P0DIR
    436          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A01         MOV     R2,#0x1
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_start_timerEx?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   538FCF       ANL     0x8f,#0xcf
   \   000003   53F6F3       ANL     0xf6,#0xf3
   \   000006   43FE01       ORL     0xfe,#0x1
   \   000009                ; Setup parameters for call to function Delay_ms
   \   000009                ; Setup parameters for call to function Delay_ms
   \   000009   7A01         MOV     R2,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ??Delay_ms?relay
   \   000003   D290         SETB    0x90.0
   \   000005                ; Setup parameters for call to function Delay_ms
   \   000005                ; Setup parameters for call to function Delay_ms
   \   000005   7AE8         MOV     R2,#-0x18
   \   000007   7B03         MOV     R3,#0x3
   \   000009   12....       LCALL   ??Delay_ms?relay
   \   00000C                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00000C                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
   \   000011                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000011                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000011   7901         MOV     R1,#0x1
   \   000013   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
   \   000016   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000019   22           RET
    437          
    438          /*********************************************************************
    439           * Event Generation Functions
    440           */
    441          /*********************************************************************
    442           * @fn      SampleApp_HandleKeys
    443           *
    444           * @brief   Handles all key events for this device.
    445           *
    446           * @param   shift - true if in shift/alt.
    447           * @param   keys - bit field for key events. Valid entries:
    448           *                 HAL_KEY_SW_2
    449           *                 HAL_KEY_SW_1
    450           *
    451           * @return  none
    452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    454          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    455            (void)shift;  // Intentionally unreferenced parameter
    456            
    457            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    458            {
    459              /* This key sends the Flash Command is sent to Group 1.
    460               * This device will not receive the Flash Command from this
    461               * device (even if it belongs to group 1).
    462               */
    463              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    464            }
    465          
    466            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    467            {
    468              /* The Flashr Command is sent to Group 1.
    469               * This key toggles this device in and out of group 1.
    470               * If this device doesn't belong to group 1, this application
    471               * will not receive the Flash command sent to group 1.
    472               */
    473              aps_Group_t *grp;
    474              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    475              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    476              {
    477                // Remove from the group
    478                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    479              }
    480              else
    481              {
    482                // Add to the flash group
    483                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    484              }
    485            }
    486          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine21_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    487          
    488          /*********************************************************************
    489           * LOCAL FUNCTIONS
    490           */
    491          
    492          /*********************************************************************
    493           * @fn      SampleApp_MessageMSGCB
    494           *
    495           * @brief   Data message processor callback.  This function processes
    496           *          any incoming data - probably from other devices.  So, based
    497           *          on cluster ID, perform the intended action.
    498           *
    499           * @param   none
    500           *
    501           * @return  none
    502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    504          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    505            uint16 flashTime;
    506          //******************³õÊ¼»¯²ÎÊý************************************************//  
    507            uint8 data[10]={0};                                            //½ÓÊÕÊý¾Ý»º´æÊý×é
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001B   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    508            uint8 datacmp[10]={0};                                         //Êý¾Ý±È½ÏÊý×é
   \   000023   740A         MOV     A,#0xa
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00002F   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   000032   740A         MOV     A,#0xa
   \   000034   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    509            osal_memcpy(datacmp, "D", 1);                                  //Êý¾ÝÊ×Î»Îª'D'
   \   000037                ; Setup parameters for call to function osal_memcpy
   \   000037   75....       MOV     ?V0 + 0,#`?<Constant "D">` & 0xff
   \   00003A   75....       MOV     ?V0 + 1,#(`?<Constant "D">` >> 8) & 0xff
   \   00003D   F5..         MOV     ?V0 + 2,A
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   7C01         MOV     R4,#0x1
   \   000046   7D00         MOV     R5,#0x0
   \   000048   740D         MOV     A,#0xd
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    510            datacmp[1]=ADDR1;                                              //Êý¾Ý2Î»ÎªµØÖ·ADDR1
   \   000053   740B         MOV     A,#0xb
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   7441         MOV     A,#0x41
   \   00005A   F0           MOVX    @DPTR,A
    511            datacmp[2]=ADDR2;                                              //Êý¾Ý3Î»ÎªµØÖ·ADDR2
   \   00005B   740C         MOV     A,#0xc
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7430         MOV     A,#0x30
   \   000062   F0           MOVX    @DPTR,A
    512            datacmp[3]=ADDR3;                                              //Êý¾Ý4Î»ÎªµØÖ·ADDR3
   \   000063   740D         MOV     A,#0xd
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7436         MOV     A,#0x36
   \   00006A   F0           MOVX    @DPTR,A
    513            
    514            switch ( pkt->clusterId )
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V0 + 0,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V0 + 1,A
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00007F   0100         DW        1
   \   000081   01           DB        1
   \   000082   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000084   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000086   ....         DW        ??SampleApp_MessageMSGCB_2
    515            {
    516          //*************Êý¾Ý´¦Àí²¿·Ö***************************************************//
    517              case SAMPLEAPP_PERIODIC_CLUSTERID:                            
    518                osal_memcpy(data,pkt->cmd.Data,pkt->cmd.DataLength);       //½«Êý¾Ý»º´æÖÁÊý×édata   
   \                     ??SampleApp_MessageMSGCB_1:
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00008B   F5..         MOV     ?V0 + 0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F5..         MOV     ?V0 + 1,A
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000096   EE           MOV     A,R6
   \   000097   2420         ADD     A,#0x20
   \   000099   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00009C   FC           MOV     R4,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FD           MOV     R5,A
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
    519                if(osal_memcmp(datacmp,data,4) && (pkt->cmd.DataLength==9))//Ê±ÖÓÍ¬²½ºÍÄ£Ê½Êý¾Ý 9Î»
   \   0000AB                ; Setup parameters for call to function osal_memcmp
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   A982         MOV     R1,DPL
   \   0000B3   AA83         MOV     R2,DPH
   \   0000B5   89..         MOV     ?V0 + 0,R1
   \   0000B7   8A..         MOV     ?V0 + 1,R2
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7C04         MOV     R4,#0x4
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   740D         MOV     A,#0xd
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   A982         MOV     R1,DPL
   \   0000C9   AA83         MOV     R2,DPH
   \   0000CB   7B00         MOV     R3,#0x0
   \   0000CD   12....       LCALL   ??osal_memcmp?relay
   \   0000D0   7403         MOV     A,#0x3
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV     A,R1
   \   0000D6   7003         JNZ     $+5
   \   0000D8   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
   \   0000DB   EE           MOV     A,R6
   \   0000DC   2420         ADD     A,#0x20
   \   0000DE   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000E1   6409         XRL     A,#0x9
   \   0000E3   7002         JNZ     ??SampleApp_MessageMSGCB_3
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000E7   6003         JZ      $+5
   \   0000E9   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    520                { 
    521                   osal_systemClock=(((uint32)data[4])<<24)+(((uint32)data[5])<<16)+(((uint32)data[6])<<8)+(data[7]);
   \   0000EC   7404         MOV     A,#0x4
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F5..         MOV     ?V0 + 0,A
   \   0000F4   E4           CLR     A
   \   0000F5   F5..         MOV     ?V0 + 1,A
   \   0000F7   F5..         MOV     ?V0 + 3,A
   \   0000F9   7418         MOV     A,#0x18
   \   0000FB   78..         MOV     R0,#?V0 + 0
   \   0000FD   12....       LCALL   ?L_SHL
   \   000100   7405         MOV     A,#0x5
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F5..         MOV     ?V0 + 4,A
   \   000108   E4           CLR     A
   \   000109   F5..         MOV     ?V0 + 5,A
   \   00010B   F5..         MOV     ?V0 + 6,A
   \   00010D   F5..         MOV     ?V0 + 7,A
   \   00010F   7410         MOV     A,#0x10
   \   000111   78..         MOV     R0,#?V0 + 4
   \   000113   12....       LCALL   ?L_SHL
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   79..         MOV     R1,#?V0 + 4
   \   00011A   12....       LCALL   ?L_ADD
   \   00011D   7406         MOV     A,#0x6
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F5..         MOV     ?V0 + 4,A
   \   000125   E4           CLR     A
   \   000126   F5..         MOV     ?V0 + 6,A
   \   000128   7408         MOV     A,#0x8
   \   00012A   78..         MOV     R0,#?V0 + 4
   \   00012C   12....       LCALL   ?L_SHL
   \   00012F   78..         MOV     R0,#?V0 + 0
   \   000131   79..         MOV     R1,#?V0 + 4
   \   000133   12....       LCALL   ?L_ADD
   \   000136   7407         MOV     A,#0x7
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F5..         MOV     ?V0 + 4,A
   \   00013E   E4           CLR     A
   \   00013F   F5..         MOV     ?V0 + 5,A
   \   000141   78..         MOV     R0,#?V0 + 0
   \   000143   79..         MOV     R1,#?V0 + 4
   \   000145   12....       LCALL   ?L_ADD
   \   000148   90....       MOV     DPTR,#osal_systemClock
   \   00014B   78..         MOV     R0,#?V0 + 0
   \   00014D   12....       LCALL   ?L_MOV_TO_X
    522                   Mode=data[8];                                           //Ç°8Î»ÎªÊ±ÖÓÊý¾Ý µÚ9Î»Îª¹¤×÷Ä£Ê½
   \   000150   7408         MOV     A,#0x8
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E0           MOVX    A,@DPTR
   \   000156   90....       MOV     DPTR,#Mode
   \   000159   F0           MOVX    @DPTR,A
    523                   pf = 1;                                                 //Ê±ÖÓÍ¬²½Íê³É pfÖÃ1
   \   00015A   90....       MOV     DPTR,#pf
   \   00015D   7401         MOV     A,#0x1
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   8033         SJMP    ??SampleApp_MessageMSGCB_0
    524                }
    525                break;
    526                
    527              case SAMPLEAPP_P2P_CLUSTERID:
    528          
    529                break;  
    530                
    531              case SAMPLEAPP_FLASH_CLUSTERID:
    532                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    533                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_2:
   \   000162   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000165   F8           MOV     R0,A
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F9           MOV     R1,A
   \   000169                ; Setup parameters for call to function HalLedBlink
   \   000169   8882         MOV     DPL,R0
   \   00016B   8983         MOV     DPH,R1
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FA           MOV     R2,A
   \   000170   8882         MOV     DPL,R0
   \   000172   8983         MOV     DPH,R1
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F9           MOV     R1,A
   \   000178   EA           MOV     A,R2
   \   000179   2400         ADD     A,#0x0
   \   00017B   F5..         MOV     ?V0 + 0,A
   \   00017D   E4           CLR     A
   \   00017E   39           ADDC    A,R1
   \   00017F   F5..         MOV     ?V0 + 1,A
   \   000181   7402         MOV     A,#0x2
   \   000183   78..         MOV     R0,#?V0 + 0
   \   000185   12....       LCALL   ?US_SHR
   \   000188   AC..         MOV     R4,?V0 + 0
   \   00018A   AD..         MOV     R5,?V0 + 1
   \   00018C   7B32         MOV     R3,#0x32
   \   00018E   7A04         MOV     R2,#0x4
   \   000190   7908         MOV     R1,#0x8
   \   000192   12....       LCALL   ??HalLedBlink?relay
    534                break;
    535            }
    536          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000195   7414         MOV     A,#0x14
   \   000197                REQUIRE ?Subroutine1
   \   000197                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003                REQUIRE ??Subroutine18_0
   \   000003                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine19_0
   \   000003                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine20_0
   \   000004                ; // Fall through to label ??Subroutine20_0
    537          
    538          /*********************************************************************
    539           * @fn      SampleApp_SendPeriodicMessage
    540           *
    541           * @brief   Send the periodic message.
    542           *
    543           * @param   none
    544           *
    545           * @return  none
    546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    547          void SampleApp_SendPeriodicMessage(uint8 ADR)
   \                     SampleApp_SendPeriodicMessage:
    548          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    549            uint8 data[]="D1";
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant "D1">` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant "D1">` & 0xff
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    550            data[1]=ADR+0X30;
   \   000021   7430         MOV     A,#0x30
   \   000023   2E           ADD     A,R6
   \   000024   C0E0         PUSH    A
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   F0           MOVX    @DPTR,A
    551            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    552                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    553                                 2,
    554                                 data,
    555                                 &SampleApp_TransID,
    556                                 AF_DISCV_ROUTE,
    557                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00002E                ; Setup parameters for call to function AF_DataRequest
   \   00002E   75..1E       MOV     ?V0 + 0,#0x1e
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000039   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   8582..       MOV     ?V0 + 0,DPL
   \   000049   8583..       MOV     ?V0 + 1,DPH
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   75..02       MOV     ?V0 + 0,#0x2
   \   000054   75..00       MOV     ?V0 + 1,#0x0
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   75..01       MOV     ?V0 + 0,#0x1
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7920         MOV     R1,#0x20
   \   000066   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000068   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00006A   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00006C   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00006E                REQUIRE ?Subroutine0
   \   00006E                ; // Fall through to label ?Subroutine0
    558            {
    559            }
    560            else
    561            {
    562              // Error occurred in request to send.
    563            }
    564          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7403         MOV     A,#0x3
   \   00000A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000D                REQUIRE ??Subroutine21_0
   \   00000D                ; // Fall through to label ??Subroutine21_0
    565          
    566          /*********************************************************************
    567           * @fn      SampleApp_SendFlashMessage
    568           *
    569           * @brief   Send the flash message to group 1.
    570           *
    571           * @param   flashTime - in milliseconds
    572           *
    573           * @return  none
    574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    576          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    577            uint8 buffer[3];
    578            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    579            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    580            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    581          
    582            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    583                                 SAMPLEAPP_FLASH_CLUSTERID,
    584                                 3,
    585                                 buffer,
    586                                 &SampleApp_TransID,
    587                                 AF_DISCV_ROUTE,
    588                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   80..         SJMP    ?Subroutine0
    589            {
    590            }
    591            else
    592            {
    593              // Error occurred in request to send.
    594            }
    595          }
    596          /*************************************************************
    597          ·¢ËÍ¶Ëµ½¶ËÊý¾Ý
    598          select£º·¢ËÍÐÅÏ¢ÀàÐÍ  1£ºÊý¾Ý  2Í¬²½ÇëÇó
    599          **************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          void SampleApp_Send_P2P_Message( uint8 select ) 
   \                     SampleApp_Send_P2P_Message:
    601          { 
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 61
   \   000005   74C3         MOV     A,#-0x3d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
    602            uint8 i;                                        //Ñ­»·¼ÆÊý
    603            double TIMER[3],HUM[3],temp;                    //ÎÂ¶È¡¢Êª¶È»º´æÊý×éºÍÖÐ¼ä±äÁ¿
    604            uint16 LIGHT[3],Temp;                           //¹âÕÕ»º´æÊý×éºÍÖÐ¼ä±äÁ¿
    605            uint8  strTemp[21]={0};                         //²É¼¯Êý¾Ý»º´æÊý×é
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   00001C   7415         MOV     A,#0x15
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    606            uint8  timerq[10]={0};                          //Í¬²½ÇëÇó»º´æÊý×é
   \   000021   7433         MOV     A,#0x33
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   AC82         MOV     R4,DPL
   \   000028   AD83         MOV     R5,DPH
   \   00002A   7583..       MOV     DPH,#(`?<Constant {0}>_3` >> 8) & 0xff
   \   00002D   7582..       MOV     DPL,#`?<Constant {0}>_3` & 0xff
   \   000030   740A         MOV     A,#0xa
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    607            
    608          //****************Êý¾Ý¼ÆËãºÍ¸³Öµ**********************************************//
    609          //* Êý¾Ý¸ñÊ½£ºDA01T 24.32H64I  347@ --21Î»
    610          //* Ã¿ÖÖÊý¾Ý²É¼¯Èý´Î£¬È¡ÖÐ¼äÖµ
    611          //* Í¬²½ÇëÇóÊý¾Ý¸ñÊ½£ºTA01 --4Î»
    612            osal_memcpy(strTemp,"D", 1);                   
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   75....       MOV     ?V0 + 0,#`?<Constant "D">` & 0xff
   \   000038   75....       MOV     ?V0 + 1,#(`?<Constant "D">` >> 8) & 0xff
   \   00003B   F5..         MOV     ?V0 + 2,A
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   7C01         MOV     R4,#0x1
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7403         MOV     A,#0x3
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
    613            strTemp[1]=ADDR1;
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   7441         MOV     A,#0x41
   \   000058   F0           MOVX    @DPTR,A
    614            strTemp[2]=ADDR2;
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   7430         MOV     A,#0x30
   \   000060   F0           MOVX    @DPTR,A
    615            strTemp[3]=ADDR3;
   \   000061   7403         MOV     A,#0x3
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   7436         MOV     A,#0x36
   \   000068   F0           MOVX    @DPTR,A
    616            osal_memcpy(timerq,"T", 1);
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   75....       MOV     ?V0 + 0,#`?<Constant "T">` & 0xff
   \   00006C   75....       MOV     ?V0 + 1,#(`?<Constant "T">` >> 8) & 0xff
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000074   7C01         MOV     R4,#0x1
   \   000076   7D00         MOV     R5,#0x0
   \   000078   7436         MOV     A,#0x36
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    617            osal_memcpy(&timerq[1],&strTemp[1],3);
   \   000083                ; Setup parameters for call to function osal_memcpy
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   A982         MOV     R1,DPL
   \   00008A   AA83         MOV     R2,DPH
   \   00008C   89..         MOV     ?V0 + 0,R1
   \   00008E   8A..         MOV     ?V0 + 1,R2
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C03         MOV     R4,#0x3
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7437         MOV     A,#0x37
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    618            if(select==0x01)
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   6F           XRL     A,R7
   \   0000A7   6003         JZ      $+5
   \   0000A9   02....       LJMP    ??SampleApp_Send_P2P_Message_0 & 0xFFFF
    619            {
    620          //*******************ÎÂÊª¶È****************************************
    621              for(i=0;i<3;i++)
   \   0000AC   7E00         MOV     R6,#0x0
    622              {
    623                SHT_DataRevise();
   \                     ??SampleApp_Send_P2P_Message_1:
   \   0000AE                ; Setup parameters for call to function SHT_DataRevise
   \   0000AE   12....       LCALL   ??SHT_DataRevise?relay
    624                TIMER[i]=temper;
   \   0000B1   8E..         MOV     ?V0 + 0,R6
   \   0000B3   75..00       MOV     ?V0 + 1,#0x0
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   78..         MOV     R0,#?V0 + 0
   \   0000BA   12....       LCALL   ?S_SHL
   \   0000BD   A8..         MOV     R0,?V0 + 0
   \   0000BF   A9..         MOV     R1,?V0 + 1
   \   0000C1   90....       MOV     DPTR,#temper
   \   0000C4   12....       LCALL   ?XLOAD_R2345
   \   0000C7   741B         MOV     A,#0x1b
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000CF   12....       LCALL   ?XSTORE_R2345
    625                HUM[i]=humid;
   \   0000D2   90....       MOV     DPTR,#humid
   \   0000D5   12....       LCALL   ?XLOAD_R2345
   \   0000D8   7427         MOV     A,#0x27
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000E0   12....       LCALL   ?XSTORE_R2345
    626                Delay_ms(10);
   \   0000E3                ; Setup parameters for call to function Delay_ms
   \   0000E3   7A0A         MOV     R2,#0xa
   \   0000E5   12....       LCALL   ?Subroutine6 & 0xFFFF
    627              }
   \                     ??CrossCallReturnLabel_10:
   \   0000E8   40C4         JC      ??SampleApp_Send_P2P_Message_1
    628              for(i=0;i<2;i++)
   \   0000EA   7E00         MOV     R6,#0x0
    629              {
    630                if(TIMER[i]>=TIMER[i+1])
   \                     ??SampleApp_Send_P2P_Message_2:
   \   0000EC   8E..         MOV     ?V0 + 0,R6
   \   0000EE   75..00       MOV     ?V0 + 1,#0x0
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?S_SHL
   \   0000F8   A8..         MOV     R0,?V0 + 0
   \   0000FA   A9..         MOV     R1,?V0 + 1
   \   0000FC   741B         MOV     A,#0x1b
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000104   12....       LCALL   ?L_MOV_X
   \   000107   85..82       MOV     DPL,?V0 + 4
   \   00010A   85..83       MOV     DPH,?V0 + 5
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   78..         MOV     R0,#?V0 + 4
   \   000113   12....       LCALL   ?L_MOV_X
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   79..         MOV     R1,#?V0 + 4
   \   00011A   12....       LCALL   ?FLT_GE
   \   00011D   5038         JNC     ??SampleApp_Send_P2P_Message_3
    631                {
    632                  temp=TIMER[i+1];
   \   00011F   8E..         MOV     ?V0 + 0,R6
   \   000121   75..00       MOV     ?V0 + 1,#0x0
   \   000124   7402         MOV     A,#0x2
   \   000126   78..         MOV     R0,#?V0 + 0
   \   000128   12....       LCALL   ?S_SHL
   \   00012B   A8..         MOV     R0,?V0 + 0
   \   00012D   A9..         MOV     R1,?V0 + 1
   \   00012F   741B         MOV     A,#0x1b
   \   000131   12....       LCALL   ?XSTACK_DISP0_8
   \   000134   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000137   12....       LCALL   ?L_MOV_X
    633                  TIMER[i+1]=TIMER[i];
   \   00013A   85..82       MOV     DPL,?V0 + 4
   \   00013D   85..83       MOV     DPH,?V0 + 5
   \   000140   12....       LCALL   ?XLOAD_R2345
   \   000143   85..82       MOV     DPL,?V0 + 6
   \   000146   85..83       MOV     DPH,?V0 + 7
   \   000149   12....       LCALL   ?XSTORE_R2345
    634                  TIMER[i]=temp;
   \   00014C   85..82       MOV     DPL,?V0 + 4
   \   00014F   85..83       MOV     DPH,?V0 + 5
   \   000152   78..         MOV     R0,#?V0 + 0
   \   000154   12....       LCALL   ?L_MOV_TO_X
    635                }
    636                if(HUM[i]>=HUM[i+1])
   \                     ??SampleApp_Send_P2P_Message_3:
   \   000157   8E..         MOV     ?V0 + 0,R6
   \   000159   75..00       MOV     ?V0 + 1,#0x0
   \   00015C   7402         MOV     A,#0x2
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   12....       LCALL   ?S_SHL
   \   000163   A8..         MOV     R0,?V0 + 0
   \   000165   A9..         MOV     R1,?V0 + 1
   \   000167   7427         MOV     A,#0x27
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00016F   12....       LCALL   ?L_MOV_X
   \   000172   85..82       MOV     DPL,?V0 + 4
   \   000175   85..83       MOV     DPH,?V0 + 5
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   78..         MOV     R0,#?V0 + 4
   \   00017E   12....       LCALL   ?L_MOV_X
   \   000181   78..         MOV     R0,#?V0 + 0
   \   000183   79..         MOV     R1,#?V0 + 4
   \   000185   12....       LCALL   ?FLT_GE
   \   000188   5038         JNC     ??SampleApp_Send_P2P_Message_4
    637                {
    638                  temp=HUM[i+1];
   \   00018A   8E..         MOV     ?V0 + 0,R6
   \   00018C   75..00       MOV     ?V0 + 1,#0x0
   \   00018F   7402         MOV     A,#0x2
   \   000191   78..         MOV     R0,#?V0 + 0
   \   000193   12....       LCALL   ?S_SHL
   \   000196   A8..         MOV     R0,?V0 + 0
   \   000198   A9..         MOV     R1,?V0 + 1
   \   00019A   7427         MOV     A,#0x27
   \   00019C   12....       LCALL   ?XSTACK_DISP0_8
   \   00019F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001A2   12....       LCALL   ?L_MOV_X
    639                  HUM[i+1]=HUM[i];
   \   0001A5   85..82       MOV     DPL,?V0 + 4
   \   0001A8   85..83       MOV     DPH,?V0 + 5
   \   0001AB   12....       LCALL   ?XLOAD_R2345
   \   0001AE   85..82       MOV     DPL,?V0 + 6
   \   0001B1   85..83       MOV     DPH,?V0 + 7
   \   0001B4   12....       LCALL   ?XSTORE_R2345
    640                  HUM[i]=temp;
   \   0001B7   85..82       MOV     DPL,?V0 + 4
   \   0001BA   85..83       MOV     DPH,?V0 + 5
   \   0001BD   78..         MOV     R0,#?V0 + 0
   \   0001BF   12....       LCALL   ?L_MOV_TO_X
    641                }
    642              }
   \                     ??SampleApp_Send_P2P_Message_4:
   \   0001C2   0E           INC     R6
   \   0001C3   EE           MOV     A,R6
   \   0001C4   C3           CLR     C
   \   0001C5   9402         SUBB    A,#0x2
   \   0001C7   5003         JNC     $+5
   \   0001C9   02....       LJMP    ??SampleApp_Send_P2P_Message_2 & 0xFFFF
    643          //***********************¹âÕÕ****************************************
    644              for(i=0;i<3;i++)
   \   0001CC   7E00         MOV     R6,#0x0
    645              {
    646                lux();
   \                     ??SampleApp_Send_P2P_Message_5:
   \   0001CE                ; Setup parameters for call to function lux
   \   0001CE   12....       LCALL   ??lux?relay
    647                LIGHT[i]=Light;
   \   0001D1   90....       MOV     DPTR,#Light
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   FA           MOV     R2,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   FB           MOV     R3,A
   \   0001D9   EE           MOV     A,R6
   \   0001DA   C3           CLR     C
   \   0001DB   33           RLC     A
   \   0001DC   F8           MOV     R0,A
   \   0001DD   E4           CLR     A
   \   0001DE   33           RLC     A
   \   0001DF   F9           MOV     R1,A
   \   0001E0   7415         MOV     A,#0x15
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001E8   EA           MOV     A,R2
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   EB           MOV     A,R3
   \   0001EC   F0           MOVX    @DPTR,A
    648                Delay_ms(200);
   \   0001ED                ; Setup parameters for call to function Delay_ms
   \   0001ED   7AC8         MOV     R2,#-0x38
   \   0001EF   12....       LCALL   ?Subroutine6 & 0xFFFF
    649              }
   \                     ??CrossCallReturnLabel_11:
   \   0001F2   40DA         JC      ??SampleApp_Send_P2P_Message_5
    650              for(i=0;i<2;i++)
   \   0001F4   7E00         MOV     R6,#0x0
    651              {
    652                if(LIGHT[i]>=LIGHT[i+1])
   \                     ??SampleApp_Send_P2P_Message_6:
   \   0001F6   EE           MOV     A,R6
   \   0001F7   C3           CLR     C
   \   0001F8   33           RLC     A
   \   0001F9   F8           MOV     R0,A
   \   0001FA   E4           CLR     A
   \   0001FB   33           RLC     A
   \   0001FC   F9           MOV     R1,A
   \   0001FD   7415         MOV     A,#0x15
   \   0001FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000202   E582         MOV     A,DPL
   \   000204   28           ADD     A,R0
   \   000205   F8           MOV     R0,A
   \   000206   E583         MOV     A,DPH
   \   000208   39           ADDC    A,R1
   \   000209   F9           MOV     R1,A
   \   00020A   8882         MOV     DPL,R0
   \   00020C   8983         MOV     DPH,R1
   \   00020E   C082         PUSH    DPL
   \   000210   C083         PUSH    DPH
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   E0           MOVX    A,@DPTR
   \   000215   F8           MOV     R0,A
   \   000216   A3           INC     DPTR
   \   000217   E0           MOVX    A,@DPTR
   \   000218   F9           MOV     R1,A
   \   000219   D083         POP     DPH
   \   00021B   D082         POP     DPL
   \   00021D   C3           CLR     C
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   98           SUBB    A,R0
   \   000220   A3           INC     DPTR
   \   000221   E0           MOVX    A,@DPTR
   \   000222   99           SUBB    A,R1
   \   000223   4044         JC      ??SampleApp_Send_P2P_Message_7
    653                {
    654                  Temp=LIGHT[i+1];
   \   000225   EE           MOV     A,R6
   \   000226   C3           CLR     C
   \   000227   33           RLC     A
   \   000228   F8           MOV     R0,A
   \   000229   E4           CLR     A
   \   00022A   33           RLC     A
   \   00022B   F9           MOV     R1,A
   \   00022C   7415         MOV     A,#0x15
   \   00022E   12....       LCALL   ?XSTACK_DISP0_8
   \   000231   E582         MOV     A,DPL
   \   000233   28           ADD     A,R0
   \   000234   F8           MOV     R0,A
   \   000235   E583         MOV     A,DPH
   \   000237   39           ADDC    A,R1
   \   000238   F9           MOV     R1,A
   \   000239   E8           MOV     A,R0
   \   00023A   2402         ADD     A,#0x2
   \   00023C   FA           MOV     R2,A
   \   00023D   E9           MOV     A,R1
   \   00023E   3400         ADDC    A,#0x0
   \   000240   FB           MOV     R3,A
   \   000241   8A82         MOV     DPL,R2
   \   000243   8B83         MOV     DPH,R3
   \   000245   E0           MOVX    A,@DPTR
   \   000246   FC           MOV     R4,A
   \   000247   A3           INC     DPTR
   \   000248   E0           MOVX    A,@DPTR
   \   000249   FD           MOV     R5,A
    655                  LIGHT[i+1]=LIGHT[i];
   \   00024A   8882         MOV     DPL,R0
   \   00024C   8983         MOV     DPH,R1
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F5..         MOV     ?V0 + 0,A
   \   000251   A3           INC     DPTR
   \   000252   E0           MOVX    A,@DPTR
   \   000253   F5..         MOV     ?V0 + 1,A
   \   000255   8A82         MOV     DPL,R2
   \   000257   8B83         MOV     DPH,R3
   \   000259   E5..         MOV     A,?V0 + 0
   \   00025B   F0           MOVX    @DPTR,A
   \   00025C   A3           INC     DPTR
   \   00025D   E5..         MOV     A,?V0 + 1
   \   00025F   F0           MOVX    @DPTR,A
    656                  LIGHT[i]=Temp;
   \   000260   8882         MOV     DPL,R0
   \   000262   8983         MOV     DPH,R1
   \   000264   EC           MOV     A,R4
   \   000265   F0           MOVX    @DPTR,A
   \   000266   A3           INC     DPTR
   \   000267   ED           MOV     A,R5
   \   000268   F0           MOVX    @DPTR,A
    657                }
    658              }
   \                     ??SampleApp_Send_P2P_Message_7:
   \   000269   0E           INC     R6
   \   00026A   EE           MOV     A,R6
   \   00026B   C3           CLR     C
   \   00026C   9402         SUBB    A,#0x2
   \   00026E   4086         JC      ??SampleApp_Send_P2P_Message_6
    659          //*****************Êý¾Ý×ª»»*******************************************   
    660          //***************ÎÂ¶È***************************
    661              if(TIMER[1]<0)
   \   000270   741F         MOV     A,#0x1f
   \   000272   12....       LCALL   ?XSTACK_DISP0_8
   \   000275   78..         MOV     R0,#?V0 + 0
   \   000277   12....       LCALL   ?L_MOV_X
   \   00027A   90....       MOV     DPTR,#__Constant_0
   \   00027D   78..         MOV     R0,#?V0 + 4
   \   00027F   12....       LCALL   ?L_MOV_X
   \   000282   78..         MOV     R0,#?V0 + 0
   \   000284   79..         MOV     R1,#?V0 + 4
   \   000286   12....       LCALL   ?FLT_LT
   \   000289   7405         MOV     A,#0x5
   \   00028B   5022         JNC     ??SampleApp_Send_P2P_Message_8
    662              {
    663                strTemp[5]='-';
   \   00028D   12....       LCALL   ?XSTACK_DISP0_8
   \   000290   742D         MOV     A,#0x2d
   \   000292   F0           MOVX    @DPTR,A
    664                TIMER[1]=-TIMER[1];
   \   000293   741F         MOV     A,#0x1f
   \   000295   12....       LCALL   ?XSTACK_DISP0_8
   \   000298   78..         MOV     R0,#?V0 + 0
   \   00029A   12....       LCALL   ?L_MOV_X
   \   00029D   E5..         MOV     A,?V0 + 3
   \   00029F   B2E7         CPL     0xE0 /* A   */.7
   \   0002A1   F5..         MOV     ?V0 + 3,A
   \   0002A3   741F         MOV     A,#0x1f
   \   0002A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A8   78..         MOV     R0,#?V0 + 0
   \   0002AA   12....       LCALL   ?L_MOV_TO_X
   \   0002AD   8006         SJMP    ??SampleApp_Send_P2P_Message_9
    665              }
    666              else
    667              {
    668                strTemp[5]=' ';
   \                     ??SampleApp_Send_P2P_Message_8:
   \   0002AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B2   7420         MOV     A,#0x20
   \   0002B4   F0           MOVX    @DPTR,A
    669              }
    670              Temp=(uint16)(TIMER[1]*100);
    671              Temp%=10000;
   \                     ??SampleApp_Send_P2P_Message_9:
   \   0002B5   741F         MOV     A,#0x1f
   \   0002B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BA   78..         MOV     R0,#?V0 + 0
   \   0002BC   12....       LCALL   ?L_MOV_X
   \   0002BF   90....       MOV     DPTR,#__Constant_42c80000
   \   0002C2   78..         MOV     R0,#?V0 + 4
   \   0002C4   12....       LCALL   ?L_MOV_X
   \   0002C7   78..         MOV     R0,#?V0 + 0
   \   0002C9   79..         MOV     R1,#?V0 + 4
   \   0002CB   12....       LCALL   ?FLT_MUL
   \   0002CE   78..         MOV     R0,#?V0 + 0
   \   0002D0   12....       LCALL   ?FLT_TO_L
   \   0002D3   A8..         MOV     R0,?V0 + 0
   \   0002D5   A9..         MOV     R1,?V0 + 1
   \   0002D7   7A10         MOV     R2,#0x10
   \   0002D9   7B27         MOV     R3,#0x27
   \   0002DB   12....       LCALL   ?US_DIV_MOD
   \   0002DE   8A..         MOV     ?V0 + 0,R2
   \   0002E0   8B..         MOV     ?V0 + 1,R3
   \   0002E2   AC..         MOV     R4,?V0 + 0
   \   0002E4   AD..         MOV     R5,?V0 + 1
    672              strTemp[6]=Temp/1000+0x30;
   \   0002E6   EC           MOV     A,R4
   \   0002E7   F8           MOV     R0,A
   \   0002E8   ED           MOV     A,R5
   \   0002E9   F9           MOV     R1,A
   \   0002EA   7AE8         MOV     R2,#-0x18
   \   0002EC   7B03         MOV     R3,#0x3
   \   0002EE   12....       LCALL   ?US_DIV_MOD
   \   0002F1   E8           MOV     A,R0
   \   0002F2   2430         ADD     A,#0x30
   \   0002F4   C0E0         PUSH    A
   \   0002F6   7406         MOV     A,#0x6
   \   0002F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FB   D0E0         POP     A
   \   0002FD   12....       LCALL   ?Subroutine4 & 0xFFFF
    673              Temp%=1000;
   \                     ??CrossCallReturnLabel_6:
   \   000300   12....       LCALL   ?US_DIV_MOD
   \   000303   8A..         MOV     ?V0 + 0,R2
   \   000305   8B..         MOV     ?V0 + 1,R3
   \   000307   AC..         MOV     R4,?V0 + 0
   \   000309   AD..         MOV     R5,?V0 + 1
    674              strTemp[7]=Temp/100+0x30;
   \   00030B   EC           MOV     A,R4
   \   00030C   F8           MOV     R0,A
   \   00030D   ED           MOV     A,R5
   \   00030E   F9           MOV     R1,A
   \   00030F   7A64         MOV     R2,#0x64
   \   000311   7B00         MOV     R3,#0x0
   \   000313   12....       LCALL   ?US_DIV_MOD
   \   000316   E8           MOV     A,R0
   \   000317   2430         ADD     A,#0x30
   \   000319   C0E0         PUSH    A
   \   00031B   7407         MOV     A,#0x7
   \   00031D   12....       LCALL   ?XSTACK_DISP0_8
   \   000320   D0E0         POP     A
   \   000322   12....       LCALL   ?Subroutine5 & 0xFFFF
    675              Temp%=100;
   \                     ??CrossCallReturnLabel_8:
   \   000325   12....       LCALL   ?US_DIV_MOD
   \   000328   8A..         MOV     ?V0 + 0,R2
   \   00032A   8B..         MOV     ?V0 + 1,R3
   \   00032C   AC..         MOV     R4,?V0 + 0
   \   00032E   AD..         MOV     R5,?V0 + 1
    676              strTemp[8]='.';
   \   000330   7408         MOV     A,#0x8
   \   000332   12....       LCALL   ?XSTACK_DISP0_8
   \   000335   742E         MOV     A,#0x2e
   \   000337   12....       LCALL   ?Subroutine3 & 0xFFFF
    677              strTemp[9]=Temp/10+0x30; 
   \                     ??CrossCallReturnLabel_2:
   \   00033A   12....       LCALL   ?US_DIV_MOD
   \   00033D   E8           MOV     A,R0
   \   00033E   2430         ADD     A,#0x30
   \   000340   C0E0         PUSH    A
   \   000342   7409         MOV     A,#0x9
   \   000344   12....       LCALL   ?XSTACK_DISP0_8
   \   000347   D0E0         POP     A
   \   000349   12....       LCALL   ?Subroutine3 & 0xFFFF
    678              strTemp[10]=Temp%10+0x30;  
   \                     ??CrossCallReturnLabel_3:
   \   00034C   12....       LCALL   ?US_DIV_MOD
   \   00034F   EA           MOV     A,R2
   \   000350   2430         ADD     A,#0x30
   \   000352   C0E0         PUSH    A
   \   000354   740A         MOV     A,#0xa
   \   000356   12....       LCALL   ?XSTACK_DISP0_8
   \   000359   D0E0         POP     A
   \   00035B   F0           MOVX    @DPTR,A
    679              
    680          //***************Êª¶È***************************    
    681              Temp=(uint16)HUM[1];
   \   00035C   742B         MOV     A,#0x2b
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   12....       LCALL   ?XLOAD_R2345
   \   000364   12....       LCALL   ?R2345_FLT_TO_L
   \   000367   AC..         MOV     R4,?V0 + 0
   \   000369   AD..         MOV     R5,?V0 + 1
    682              if(Temp>=100)
   \   00036B   C3           CLR     C
   \   00036C   EC           MOV     A,R4
   \   00036D   9464         SUBB    A,#0x64
   \   00036F   ED           MOV     A,R5
   \   000370   9400         SUBB    A,#0x0
   \   000372   4004         JC      ??SampleApp_Send_P2P_Message_10
    683              {
    684                  Temp=99;
   \   000374   7C63         MOV     R4,#0x63
   \   000376   7D00         MOV     R5,#0x0
    685              }
    686              strTemp[12]=Temp/10+0x30; 
   \                     ??SampleApp_Send_P2P_Message_10:
   \   000378   EC           MOV     A,R4
   \   000379   F8           MOV     R0,A
   \   00037A   ED           MOV     A,R5
   \   00037B   F9           MOV     R1,A
   \   00037C   7A0A         MOV     R2,#0xa
   \   00037E   7B00         MOV     R3,#0x0
   \   000380   12....       LCALL   ?US_DIV_MOD
   \   000383   E8           MOV     A,R0
   \   000384   2430         ADD     A,#0x30
   \   000386   C0E0         PUSH    A
   \   000388   740C         MOV     A,#0xc
   \   00038A   12....       LCALL   ?XSTACK_DISP0_8
   \   00038D   D0E0         POP     A
   \   00038F   12....       LCALL   ?Subroutine3 & 0xFFFF
    687              strTemp[13]=Temp%10+0x30;
   \                     ??CrossCallReturnLabel_4:
   \   000392   12....       LCALL   ?US_DIV_MOD
   \   000395   EA           MOV     A,R2
   \   000396   2430         ADD     A,#0x30
   \   000398   C0E0         PUSH    A
   \   00039A   740D         MOV     A,#0xd
   \   00039C   12....       LCALL   ?XSTACK_DISP0_8
   \   00039F   D0E0         POP     A
   \   0003A1   F0           MOVX    @DPTR,A
    688          
    689          //********ÎÂÊª¶È¼ì´í***************************    
    690              if(SHTerror)
   \   0003A2   90....       MOV     DPTR,#SHTerror
   \   0003A5   E0           MOVX    A,@DPTR
   \   0003A6   602B         JZ      ??SampleApp_Send_P2P_Message_11
    691              {
    692                  osal_memcpy(&strTemp[4],"T-99.99", 7);  //ÎÂ¶È´íÎóÏÔÊ¾
   \   0003A8                ; Setup parameters for call to function osal_memcpy
   \   0003A8   75....       MOV     ?V0 + 0,#`?<Constant "T-99.99">` & 0xff
   \   0003AB   75....       MOV     ?V0 + 1,#(`?<Constant "T-99.99">` >> 8) & 0xff
   \   0003AE   75..00       MOV     ?V0 + 2,#0x0
   \   0003B1   78..         MOV     R0,#?V0 + 0
   \   0003B3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003B6   7C07         MOV     R4,#0x7
   \   0003B8   7D00         MOV     R5,#0x0
   \   0003BA   EC           MOV     A,R4
   \   0003BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003BE   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0003C1   12....       LCALL   ?DEALLOC_XSTACK8
    693                  osal_memcpy(&strTemp[11],"H-1", 3);     //Êª¶È´íÎóÏÔÊ¾
   \   0003C4                ; Setup parameters for call to function osal_memcpy
   \   0003C4   75....       MOV     ?V0 + 0,#`?<Constant "H-1">` & 0xff
   \   0003C7   75....       MOV     ?V0 + 1,#(`?<Constant "H-1">` >> 8) & 0xff
   \   0003CA   78..         MOV     R0,#?V0 + 0
   \   0003CC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003CF   7C03         MOV     R4,#0x3
   \   0003D1   802A         SJMP    ??SampleApp_Send_P2P_Message_12
    694              }
    695              else
    696              {
    697                  osal_memcpy(&strTemp[4],"T", 1);
   \                     ??SampleApp_Send_P2P_Message_11:
   \   0003D3                ; Setup parameters for call to function osal_memcpy
   \   0003D3   75....       MOV     ?V0 + 0,#`?<Constant "T">` & 0xff
   \   0003D6   75....       MOV     ?V0 + 1,#(`?<Constant "T">` >> 8) & 0xff
   \   0003D9   75..00       MOV     ?V0 + 2,#0x0
   \   0003DC   78..         MOV     R0,#?V0 + 0
   \   0003DE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003E1   7C01         MOV     R4,#0x1
   \   0003E3   7D00         MOV     R5,#0x0
   \   0003E5   7407         MOV     A,#0x7
   \   0003E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EA   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0003ED   12....       LCALL   ?DEALLOC_XSTACK8
    698                  osal_memcpy(&strTemp[11],"H", 1);
   \   0003F0                ; Setup parameters for call to function osal_memcpy
   \   0003F0   75....       MOV     ?V0 + 0,#`?<Constant "H">` & 0xff
   \   0003F3   75....       MOV     ?V0 + 1,#(`?<Constant "H">` >> 8) & 0xff
   \   0003F6   78..         MOV     R0,#?V0 + 0
   \   0003F8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003FB   7C01         MOV     R4,#0x1
   \                     ??SampleApp_Send_P2P_Message_12:
   \   0003FD   7D00         MOV     R5,#0x0
   \   0003FF   740E         MOV     A,#0xe
   \   000401   12....       LCALL   ?XSTACK_DISP0_8
    699              }
   \   000404   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000407   12....       LCALL   ?DEALLOC_XSTACK8
    700              SHTerror=0;
   \   00040A   90....       MOV     DPTR,#SHTerror
   \   00040D   E4           CLR     A
   \   00040E   F0           MOVX    @DPTR,A
    701              
    702          //***************¹âÕÕ**************************   
    703              Temp=LIGHT[1];
   \   00040F   7417         MOV     A,#0x17
   \   000411   12....       LCALL   ?XSTACK_DISP0_8
   \   000414   E0           MOVX    A,@DPTR
   \   000415   FC           MOV     R4,A
   \   000416   A3           INC     DPTR
   \   000417   E0           MOVX    A,@DPTR
   \   000418   FD           MOV     R5,A
    704              strTemp[15]=Temp/10000+0x30;
   \   000419   EC           MOV     A,R4
   \   00041A   F8           MOV     R0,A
   \   00041B   ED           MOV     A,R5
   \   00041C   F9           MOV     R1,A
   \   00041D   7A10         MOV     R2,#0x10
   \   00041F   7B27         MOV     R3,#0x27
   \   000421   12....       LCALL   ?US_DIV_MOD
   \   000424   E8           MOV     A,R0
   \   000425   2430         ADD     A,#0x30
   \   000427   C0E0         PUSH    A
   \   000429   740F         MOV     A,#0xf
   \   00042B   12....       LCALL   ?XSTACK_DISP0_8
   \   00042E   D0E0         POP     A
   \   000430   12....       LCALL   ?Subroutine15 & 0xFFFF
    705              Temp%=10000;
   \                     ??CrossCallReturnLabel_23:
   \   000433   7A10         MOV     R2,#0x10
   \   000435   7B27         MOV     R3,#0x27
   \   000437   12....       LCALL   ?US_DIV_MOD
   \   00043A   8A..         MOV     ?V0 + 0,R2
   \   00043C   8B..         MOV     ?V0 + 1,R3
   \   00043E   AC..         MOV     R4,?V0 + 0
   \   000440   AD..         MOV     R5,?V0 + 1
    706              strTemp[16]=Temp/1000+0x30;
   \   000442   EC           MOV     A,R4
   \   000443   F8           MOV     R0,A
   \   000444   ED           MOV     A,R5
   \   000445   F9           MOV     R1,A
   \   000446   7AE8         MOV     R2,#-0x18
   \   000448   7B03         MOV     R3,#0x3
   \   00044A   12....       LCALL   ?US_DIV_MOD
   \   00044D   E8           MOV     A,R0
   \   00044E   2430         ADD     A,#0x30
   \   000450   C0E0         PUSH    A
   \   000452   7410         MOV     A,#0x10
   \   000454   12....       LCALL   ?XSTACK_DISP0_8
   \   000457   D0E0         POP     A
   \   000459   12....       LCALL   ?Subroutine4 & 0xFFFF
    707              Temp%=1000;
   \                     ??CrossCallReturnLabel_7:
   \   00045C   12....       LCALL   ?US_DIV_MOD
   \   00045F   8A..         MOV     ?V0 + 0,R2
   \   000461   8B..         MOV     ?V0 + 1,R3
   \   000463   AC..         MOV     R4,?V0 + 0
   \   000465   AD..         MOV     R5,?V0 + 1
    708              strTemp[17]=Temp/100+0x30;
   \   000467   EC           MOV     A,R4
   \   000468   F8           MOV     R0,A
   \   000469   ED           MOV     A,R5
   \   00046A   F9           MOV     R1,A
   \   00046B   7A64         MOV     R2,#0x64
   \   00046D   7B00         MOV     R3,#0x0
   \   00046F   12....       LCALL   ?US_DIV_MOD
   \   000472   E8           MOV     A,R0
   \   000473   2430         ADD     A,#0x30
   \   000475   C0E0         PUSH    A
   \   000477   7411         MOV     A,#0x11
   \   000479   12....       LCALL   ?XSTACK_DISP0_8
   \   00047C   D0E0         POP     A
   \   00047E   12....       LCALL   ?Subroutine5 & 0xFFFF
    709              Temp%=100;
   \                     ??CrossCallReturnLabel_9:
   \   000481   12....       LCALL   ?US_DIV_MOD
   \   000484   8A..         MOV     ?V0 + 0,R2
   \   000486   8B..         MOV     ?V0 + 1,R3
   \   000488   AC..         MOV     R4,?V0 + 0
   \   00048A   AD..         MOV     R5,?V0 + 1
    710              strTemp[18]=Temp/10+0x30;  
   \   00048C   EC           MOV     A,R4
   \   00048D   F8           MOV     R0,A
   \   00048E   ED           MOV     A,R5
   \   00048F   F9           MOV     R1,A
   \   000490   7A0A         MOV     R2,#0xa
   \   000492   7B00         MOV     R3,#0x0
   \   000494   12....       LCALL   ?US_DIV_MOD
   \   000497   E8           MOV     A,R0
   \   000498   2430         ADD     A,#0x30
   \   00049A   C0E0         PUSH    A
   \   00049C   7412         MOV     A,#0x12
   \   00049E   12....       LCALL   ?XSTACK_DISP0_8
   \   0004A1   D0E0         POP     A
   \   0004A3   12....       LCALL   ?Subroutine3 & 0xFFFF
    711              strTemp[19]=Temp%10+0x30; 
   \                     ??CrossCallReturnLabel_5:
   \   0004A6   12....       LCALL   ?US_DIV_MOD
   \   0004A9   EA           MOV     A,R2
   \   0004AA   2430         ADD     A,#0x30
   \   0004AC   C0E0         PUSH    A
   \   0004AE   7413         MOV     A,#0x13
   \   0004B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B3   D0E0         POP     A
   \   0004B5   F0           MOVX    @DPTR,A
    712              
    713          //***********¹âÕÕ¼ì´í*************************** 
    714              if(LUXerror)
   \   0004B6   90....       MOV     DPTR,#LUXerror
   \   0004B9   E0           MOVX    A,@DPTR
   \   0004BA   600F         JZ      ??SampleApp_Send_P2P_Message_13
    715              {
    716                  osal_memcpy(&strTemp[14],"I65535", 6);
   \   0004BC                ; Setup parameters for call to function osal_memcpy
   \   0004BC   75....       MOV     ?V0 + 0,#`?<Constant "I65535">` & 0xff
   \   0004BF   75....       MOV     ?V0 + 1,#(`?<Constant "I65535">` >> 8) & 0xff
   \   0004C2   78..         MOV     R0,#?V0 + 0
   \   0004C4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004C7   7C06         MOV     R4,#0x6
   \   0004C9   800D         SJMP    ??SampleApp_Send_P2P_Message_14
    717              }                                        
    718              else
    719              {
    720                osal_memcpy(&strTemp[14],"I", 1);
   \                     ??SampleApp_Send_P2P_Message_13:
   \   0004CB                ; Setup parameters for call to function osal_memcpy
   \   0004CB   75....       MOV     ?V0 + 0,#`?<Constant "I">` & 0xff
   \   0004CE   75....       MOV     ?V0 + 1,#(`?<Constant "I">` >> 8) & 0xff
   \   0004D1   78..         MOV     R0,#?V0 + 0
   \   0004D3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004D6   7C01         MOV     R4,#0x1
   \                     ??SampleApp_Send_P2P_Message_14:
   \   0004D8   7D00         MOV     R5,#0x0
   \   0004DA   7411         MOV     A,#0x11
   \   0004DC   12....       LCALL   ?XSTACK_DISP0_8
    721              }
   \   0004DF   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0004E2   12....       LCALL   ?DEALLOC_XSTACK8
    722              LUXerror=0;
   \   0004E5   90....       MOV     DPTR,#LUXerror
   \   0004E8   E4           CLR     A
   \   0004E9   F0           MOVX    @DPTR,A
    723              strTemp[20]='@';
   \   0004EA   7414         MOV     A,#0x14
   \   0004EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EF   7440         MOV     A,#0x40
   \   0004F1   F0           MOVX    @DPTR,A
    724          //************ÏûÈ¥Êý¾ÝÊ×Áã***********************
    725               if(strTemp[6]=='0')
   \   0004F2   7406         MOV     A,#0x6
   \   0004F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0004F7   E0           MOVX    A,@DPTR
   \   0004F8   6430         XRL     A,#0x30
   \   0004FA   7003         JNZ     ??SampleApp_Send_P2P_Message_15
    726               {
    727                  strTemp[6]=' ';
   \   0004FC   7420         MOV     A,#0x20
   \   0004FE   F0           MOVX    @DPTR,A
    728               }
    729               if(strTemp[12]=='0')
   \                     ??SampleApp_Send_P2P_Message_15:
   \   0004FF   740C         MOV     A,#0xc
   \   000501   12....       LCALL   ?XSTACK_DISP0_8
   \   000504   E0           MOVX    A,@DPTR
   \   000505   6430         XRL     A,#0x30
   \   000507   7003         JNZ     ??SampleApp_Send_P2P_Message_16
    730               {
    731                  strTemp[12]=' ';
   \   000509   7420         MOV     A,#0x20
   \   00050B   F0           MOVX    @DPTR,A
    732               }
    733               for(i=0;i<4;i++)
   \                     ??SampleApp_Send_P2P_Message_16:
   \   00050C   7E00         MOV     R6,#0x0
    734               {
    735                  if(strTemp[15+i]=='0')
   \                     ??SampleApp_Send_P2P_Message_17:
   \   00050E   8E..         MOV     ?V0 + 0,R6
   \   000510   85..82       MOV     DPL,?XSP + 0
   \   000513   85..83       MOV     DPH,?XSP + 1
   \   000516   E582         MOV     A,DPL
   \   000518   25..         ADD     A,?V0 + 0
   \   00051A   F8           MOV     R0,A
   \   00051B   E583         MOV     A,DPH
   \   00051D   3400         ADDC    A,#0x0
   \   00051F   F9           MOV     R1,A
   \   000520   E8           MOV     A,R0
   \   000521   240F         ADD     A,#0xf
   \   000523   F582         MOV     DPL,A
   \   000525   E9           MOV     A,R1
   \   000526   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000529   6430         XRL     A,#0x30
   \   00052B   700A         JNZ     ??SampleApp_Send_P2P_Message_18
    736                  {
    737                    strTemp[15+i]=' ';
   \   00052D   7420         MOV     A,#0x20
   \   00052F   F0           MOVX    @DPTR,A
    738                  }
    739                  else
    740                  {
    741                    break;
    742                  }
    743               } 
   \   000530   0E           INC     R6
   \   000531   EE           MOV     A,R6
   \   000532   C3           CLR     C
   \   000533   9404         SUBB    A,#0x4
   \   000535   40D7         JC      ??SampleApp_Send_P2P_Message_17
    744          //**************Çå¿ÕÊý×é**************************
    745               osal_memset(TIMER,0,sizeof(TIMER));
   \                     ??SampleApp_Send_P2P_Message_18:
   \   000537                ; Setup parameters for call to function osal_memset
   \   000537   7C0C         MOV     R4,#0xc
   \   000539   7D00         MOV     R5,#0x0
   \   00053B   7900         MOV     R1,#0x0
   \   00053D   741B         MOV     A,#0x1b
   \   00053F   12....       LCALL   ?XSTACK_DISP0_8
   \   000542   AA82         MOV     R2,DPL
   \   000544   AB83         MOV     R3,DPH
   \   000546   12....       LCALL   ??osal_memset?relay
    746               osal_memset(HUM,0,sizeof(HUM));
   \   000549                ; Setup parameters for call to function osal_memset
   \   000549   7C0C         MOV     R4,#0xc
   \   00054B   7D00         MOV     R5,#0x0
   \   00054D   7900         MOV     R1,#0x0
   \   00054F   7427         MOV     A,#0x27
   \   000551   12....       LCALL   ?XSTACK_DISP0_8
   \   000554   AA82         MOV     R2,DPL
   \   000556   AB83         MOV     R3,DPH
   \   000558   12....       LCALL   ??osal_memset?relay
    747               osal_memset(LIGHT,0,sizeof(LIGHT));
   \   00055B                ; Setup parameters for call to function osal_memset
   \   00055B   7C06         MOV     R4,#0x6
   \   00055D   7D00         MOV     R5,#0x0
   \   00055F   7900         MOV     R1,#0x0
   \   000561   7415         MOV     A,#0x15
   \   000563   12....       LCALL   ?XSTACK_DISP0_8
   \   000566   AA82         MOV     R2,DPL
   \   000568   AB83         MOV     R3,DPH
   \   00056A   12....       LCALL   ??osal_memset?relay
    748          
    749          //**************·¢ËÍ******************************    
    750              if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc, 
    751                                    SAMPLEAPP_P2P_CLUSTERID, 
    752                                    21, 
    753                                    strTemp, 
    754                                    &SampleApp_TransID, 
    755                                    AF_DISCV_ROUTE, 
    756                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) 
   \   00056D                ; Setup parameters for call to function AF_DataRequest
   \   00056D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000570   78..         MOV     R0,#?V0 + 0
   \   000572   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000575   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000578   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00057B   78..         MOV     R0,#?V0 + 0
   \   00057D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000580   7403         MOV     A,#0x3
   \   000582   12....       LCALL   ?XSTACK_DISP0_8
   \   000585   8582..       MOV     ?V0 + 0,DPL
   \   000588   8583..       MOV     ?V0 + 1,DPH
   \   00058B   78..         MOV     R0,#?V0 + 0
   \   00058D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000590   75..15       MOV     ?V0 + 0,#0x15
   \   000593   75..00       MOV     ?V0 + 1,#0x0
   \   000596   78..         MOV     R0,#?V0 + 0
   \   000598   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00059B   75..04       MOV     ?V0 + 0,#0x4
   \   00059E   8033         SJMP    ??SampleApp_Send_P2P_Message_19
    757              { 
    758              }
    759              else 
    760              { 
    761                  // Error occurred in request to send. 
    762              } 
    763            }
    764          //*****************·¢ËÍÊ±¼äÍ¬²½ÇëÇó*******************************************//
    765            else if(select==0x02)
   \                     ??SampleApp_Send_P2P_Message_0:
   \   0005A0   7402         MOV     A,#0x2
   \   0005A2   6F           XRL     A,R7
   \   0005A3   7045         JNZ     ??SampleApp_Send_P2P_Message_20
    766            {  
    767              if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc, 
    768                                    SAMPLEAPP_P2P_CLUSTERID, 
    769                                    4, 
    770                                    timerq, 
    771                                    &SampleApp_TransID, 
    772                                    AF_DISCV_ROUTE, 
    773                                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) 
   \   0005A5                ; Setup parameters for call to function AF_DataRequest
   \   0005A5   75..1E       MOV     ?V0 + 0,#0x1e
   \   0005A8   78..         MOV     R0,#?V0 + 0
   \   0005AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005AD   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0005B0   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0005B3   78..         MOV     R0,#?V0 + 0
   \   0005B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005B8   7436         MOV     A,#0x36
   \   0005BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0005BD   8582..       MOV     ?V0 + 0,DPL
   \   0005C0   8583..       MOV     ?V0 + 1,DPH
   \   0005C3   78..         MOV     R0,#?V0 + 0
   \   0005C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005C8   75..04       MOV     ?V0 + 0,#0x4
   \   0005CB   75..00       MOV     ?V0 + 1,#0x0
   \   0005CE   78..         MOV     R0,#?V0 + 0
   \   0005D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \                     ??SampleApp_Send_P2P_Message_19:
   \   0005D3   78..         MOV     R0,#?V0 + 0
   \   0005D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005D8   7920         MOV     R1,#0x20
   \   0005DA   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0005DC   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0005DE   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0005E0   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0005E2   12....       LCALL   ??AF_DataRequest?relay
   \   0005E5   7409         MOV     A,#0x9
   \   0005E7   12....       LCALL   ?DEALLOC_XSTACK8
    774              { 
    775              }
    776              else 
    777              { 
    778                  // Error occurred in request to send. 
    779              } 
    780            }
    781          } 
   \                     ??SampleApp_Send_P2P_Message_20:
   \   0005EA   743D         MOV     A,#0x3d
   \   0005EC   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   85..82       MOV     DPL,?V0 + 4
   \   000006   F583         MOV     DPH,A
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   2404         ADD     A,#0x4
   \   000007   F5..         MOV     ?V0 + 6,A
   \   000009   E5..         MOV     A,?V0 + 5
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 7,A
   \   00000F   85..82       MOV     DPL,?V0 + 6
   \   000012   F583         MOV     DPH,A
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F5..         MOV     ?V0 + 4,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F5..         MOV     ?V0 + 5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??Delay_ms?relay
   \   000005   0E           INC     R6
   \   000006   EE           MOV     A,R6
   \   000007   C3           CLR     C
   \   000008   9403         SUBB    A,#0x3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   7A64         MOV     R2,#0x64
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   7AE8         MOV     R2,#-0x18
   \   000005   7B03         MOV     R3,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   F8           MOV     R0,A
   \   000003   ED           MOV     A,R5
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   7A0A         MOV     R2,#0xa
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Mode>`:
   \   000000   43           DB 67

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "D">`:
   \   000000   4400         DB "D"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "D1">`:
   \   000000   443100       DB "D1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_3`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T">`:
   \   000000   5400         DB "T"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T-99.99">`:
   \   000000   542D3939     DB "T-99.99"
   \            2E393900

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "H-1">`:
   \   000000   482D3100     DB "H-1"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "H">`:
   \   000000   4800         DB "H"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I65535">`:
   \   000000   49363535     DB "I65535"
   \            333500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I">`:
   \   000000   4900         DB "I"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> macRadioSetTxPower            0      0     22
       -> Delay_ms                      0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
     SampleApp_MessageMSGCB             2      0     51
       -> osal_memcpy                   0      0     78
       -> osal_memcpy                   0      0     78
       -> osal_memcmp                   0      0     78
       -> HalLedBlink                   0      0     72
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_start_timerEx            0      0     24
       -> Delay_ms                      0      0     24
       -> Delay_ms                      0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
       -> Delay_ms                      0      0     24
       -> Delay_ms                      0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> NLME_SetPollRate              0      0     24
       -> NLME_SetQueuedPollRate        0      0     24
       -> NLME_SetResponseRate          0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     22
       -> AF_DataRequest                0      0     44
     SampleApp_Send_P2P_Message         2      0     98
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> SHT_DataRevise                0      0    154
       -> Delay_ms                      0      0    154
       -> lux                           0      0    154
       -> Delay_ms                      0      0    154
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> osal_memcpy                   0      0    160
       -> osal_memset                   0      0    154
       -> osal_memset                   0      0    154
       -> osal_memset                   0      0    154
       -> AF_DataRequest                0      0    172
       -> AF_DataRequest                0      0    172


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     P0INP                                    1
     _A_P1                                    1
     P0SEL                                    1
     P1SEL                                    1
     P1INP                                    1
     P0DIR                                    1
     P1DIR                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     pf                                       1
     powf                                     1
     SleepTime_MS                             4
     SleepTime                                4
     TX_Flag                                  1
     TCount                                   1
     CountF                                   1
     Mode                                     1
     SampleApp_Init                         236
     ?Subroutine14                           21
     ??Subroutine20_0                         6
     SampleApp_ProcessEvent                 260
     ?Subroutine11                            2
     ??Subroutine17_0                        11
     ?Subroutine8                            12
     ?Subroutine2                            26
     SampleApp_HandleKeys                    62
     ??Subroutine21_0                         5
     SampleApp_MessageMSGCB                 407
     ?Subroutine1                             8
     ?Subroutine9                             3
     ??Subroutine18_0                         3
     ??Subroutine19_0                         6
     ?Subroutine7                             4
     SampleApp_SendPeriodicMessage          110
     ?Subroutine0                            13
     SampleApp_SendFlashMessage             107
     SampleApp_Send_P2P_Message            1519
     ?Subroutine13                           11
     ?Subroutine12                           11
     ?Subroutine10                           23
     ?Subroutine16                           11
     ?Subroutine6                            11
     ?Subroutine5                             8
     ?Subroutine4                             8
     ?Subroutine15                            6
     ?Subroutine3                             8
     ?<Initializer for Mode>                  1
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_Send_P2P_Message?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant {0}>                         10
     ?<Constant {0}>_1                       10
     ?<Constant "D">                          2
     ?<Constant "D1">                         3
     ?<Constant {0}>_2                       21
     ?<Constant {0}>_3                       10
     ?<Constant "T">                          2
     ?<Constant "T-99.99">                    8
     ?<Constant "H-1">                        4
     ?<Constant "H">                          2
     ?<Constant "I65535">                     7
     ?<Constant "I">                          2
     __Constant_0                             4
     __Constant_42c80000                      4

 
 2 918 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     7 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   113 bytes in segment XDATA_ROM_C
    78 bytes in segment XDATA_Z
 
 2 961 bytes of CODE  memory
   105 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 7 bytes shared)
    79 bytes of XDATA memory

Errors: none
Warnings: none
